191231

package com.eomcs.oop.ex03.test; public class Test02

클래스파일: 소스코드와 기계어의 중간정도.

> 생성자를 안만들면 자바 컴파일러가 기본생성자를 만든다 public Test02();

기본생상자도 this라는 내장변수 있다.

0  aload_0 [this] 0번째 변수는 항상 this

1  invokespecial java.lang.Object() [8] 수퍼클래스의 생성자 호출

    4  return 리턴.

------------------------------

  static int s1;
  static int s2;
  int i1;
  int i2;
추가시 class파일의 변화. 순서바꿔보기. 

 static void m1() {
    
  } 추가시 class파일에 리턴 들어가 있음. 그 안에   int a;
     넣어도 변화 없음.
쓸데없는 것은 컴파일에 넣지 않고 최적화. 옵티마이징.

a=100; b=100;추가시 
    Local variable table:
        [pc: 3, pc: 8] local: a index: 0 type: int
        [pc: 7, pc: 8] local: b index: 1 type: int 내용 추가됨.

변수를 선언해도 ㅅ쓰지 않으면 컴파일에서 빼고
로컬변수 사용시에 컴파일 생성.

메소드 에리어에 클래스 코드 올라가고. 
m1이라는 메소드를 호출하는 것을 보면 스택에 메모리를 준비.


 static void m1(int c) {
    int a, b;
    a=100;
    b=200;
  } 파라미터 추가시 변경사항: 
파라미터도 로컬변수임을 알 수 있음.
Local variable table:
        [pc: 0, pc: 8] local: c index: 0 type: int
        [pc: 3, pc: 8] local: a index: 1 type: int
        [pc: 7, pc: 8] local: b index: 2 type: int
순서: 파라미터가 먼저 올라옴.
파라미터가 우선. 

외부에서 값을 받는 로컬변수가 파라미터이다.


**  static void x() {
  }

  void m2() {    
  }
추가시  아래

* // Method descriptor #11 ()V
  // Stack: 0, Locals: 0
  static void x();
    0  return
      Line numbers:
        [pc: 0, line: 18]
  
  // Method descriptor #11 ()V
  // Stack: 0, Locals: 1
  void m2();
    0  return
      Line numbers:
        [pc: 0, line: 22]
      Local variable table:
        [pc: 0, pc: 1] local: this index: 0 type: com.eomcs.oop.ex03.test.Test02 (타입도 test02라고 나옴)

=> 인스턴스 변수 m2에는 로컬 베리어블, 토컬1개가 있다 -> this!!!! =0번 로컬변수


  static int s1;
  int i1;
  
  static int s2;
  int i2;
  
  static void m1(int c) {
    int a, b;
    a=100;
    b=200;
  }
  
  static void x(int a) {
    
  }

  void m2(int a) {
    
  }

------------------------------------------------

package com.eomcs.oop.ex03.test;

public class Test02 {
 Test02(int a) {
   
 }
}

이렇게 하면 클래스파일에서 기본생성자가 없음!
----------------------------


  Test02();
    0  aload_0 [this]
    1  invokespecial java.lang.Object() [10]
    4  return

최소의 문장 아무것도 작성안해도 들어감
this=에 넘어온 객체주소저장 (인스턴스의 주소)
슈퍼클래스 메소드 호출하는 문장 super();
2개가 기본적으로 들어가 있다.



--------------------------------


public class Test02 {
  
  int x = 100;
  
  Test02() {
    
  }
  
 Test02(int a) {
   
 }
 
 
}
추가시 코드가 추가됨. 생성자마다 추가됨

인스턴스 초기화 문장은 자동으로 생성자마다 복사됨.

아래 처럼

public class Test02 {
  
  int x;
  
  Test02() {
    x = 100;
  }
  
 Test02(int a) {
   x = 100;
 } 
}


>this = 인스턴스 주소;
    super();
    x = 100;기본으로 생성자마다 들어감
--------------------

package com.eomcs.oop.ex03.test;

public class Test02 {
  
  int x = 100;
  
  Test02() {
  }
  
 Test02(int a) {
 }
 
 
}

이것과

package com.eomcs.oop.ex03.test;

public class Test02 {
  
  int x;
  
  Test02() {
x = 100
  }
  
 Test02(int a) {
x = 100
 }
 
}

가 코드가 똑같음.

------------------------------


package com.eomcs.oop.ex03.test;

public class Test02 {


  Test02() {
  }

  Test02(int a) {
  }

  int x =100;;

  {
    this.x=200;
  }

}

>>클래스 파일:

// Compiled from Test02.java (version 11 : 55.0, super bit)
public class com.eomcs.oop.ex03.test.Test02 {
  
  // Field descriptor #6 I
  int x;
  
  // Method descriptor #8 ()V
  // Stack: 2, Locals: 1
  Test02();
     0  aload_0 [this]
     1  invokespecial java.lang.Object() [10]
     4  aload_0 [this]
     5  bipush 100
     7  putfield com.eomcs.oop.ex03.test.Test02.x : int [12]
    10  aload_0 [this]
    11  sipush 200
    14  putfield com.eomcs.oop.ex03.test.Test02.x : int [12]
    17  return
      Line numbers:
        [pc: 0, line: 6]
        [pc: 4, line: 12]
        [pc: 10, line: 15]
        [pc: 17, line: 7]
      Local variable table:
        [pc: 0, pc: 18] local: this index: 0 type: com.eomcs.oop.ex03.test.Test02
  
  // Method descriptor #18 (I)V
  // Stack: 2, Locals: 2
  Test02(int a);
     0  aload_0 [this]
     1  invokespecial java.lang.Object() [10]
     4  aload_0 [this]
     5  bipush 100
     7  putfield com.eomcs.oop.ex03.test.Test02.x : int [12]
    10  aload_0 [this]
    11  sipush 200
    14  putfield com.eomcs.oop.ex03.test.Test02.x : int [12]
    17  return
      Line numbers:
        [pc: 0, line: 9]
        [pc: 4, line: 12]
        [pc: 10, line: 15]
        [pc: 17, line: 10]
      Local variable table:
        [pc: 0, pc: 18] local: this index: 0 type: com.eomcs.oop.ex03.test.Test02
        [pc: 0, pc: 18] local: a index: 1 type: int
}

>> 컴파일러가 코드를 아래처럼 바꾼것.

package com.eomcs.oop.ex03.test;

public class Test02 {


  Test02() {
    this.x =100;
    this.x =200;
  }

  Test02(int a) {
    this.x =100;
    this.x =200;
  }

}


------------------------------------------

package com.eomcs.oop.ex03.test;

public class Test02 {

  Test02() {
    this.x=300;
  }

  Test02(int a) {
    this.x=300;
  }

  {
    this.x=200;
  }

  int x =100;

}

>> 순서대로 컴파일 됨. 인스턴스 필드와 인스턴스 초기화 문장



스태틱 메서드는 this라는 로컬변수 없다.

인스턴스 필드와 인스턴스 초기화 문장은 순서대로 각각 모든 생성자에 들어간다.



package com.eomcs.oop.ex03.test;

public class Test02 {

  Test02() {
    this.x=300;
  }

  Test02(int a) {
    this.x=300;
  }

  int x =100;

  {
    this.x=200;
  }
}

>>컴파일러>>
package com.eomcs.oop.ex03.test;

public class Test02 {

  Test02() {
    this.x =100;
    this.x=200;
    this.x=300;
  }

  Test02(int a) {
    this.x=200;
    this.x=300;
  }

  
}
---------------------------------
============================================

package com.eomcs.oop.ex07.a; Exam0110  Exam0312?.java : 캡슐화 문법




---------------

bitcamp-project 15번 16번
    

-----------

스타벅스는 13인치다.
16인치는 산올라가서 영상편집바로하고 올리는 사람들이나 하는것.




-----------------------------------

<객체지향프로그램> Object Oriented Program
-부품지향프로그램
-객체지향의 정신 두 가지:
-High Cohesion : 응집력을 높여라, 1클래스는 1역할, 잘개 쪼개
-Low Coupling: 커플링을 낮춰, 잭 많이 꼽지마.

class의 역할을 잘게 쪼개면 쪼갤수록 재사용성이 높아지고 대체가 쉬워진다. = 유지보수가 쉬워진다




====================================================
16번 버전1
-----------
<보드리스트>
package com.eomcs.lms.handler; 
// 보드리스트를 뽑아낸 이유: 
//보드리스트는 데이터만 갖고 있고 아무것도 안하고 있음
//데이터 값을 다루는 연산자가 필요 (add list detail 메서드)
//>얘도 핸들러에서 빼옴
import com.eomcs.lms.domain.Board;

public class BoardList {
  
  private static final int DEFAULT_CAPACITY = 100; //private로 해도되고 안해도됨/.
  
  private Board[] list;
  private int size; 
  
  //기본생성자  (배식차 만들기)
	
 //  생성자 (배식차 만들기)
  public BoardList() {
    this.list = new Board[DEFAULT_CAPACITY];
  }
  
  //생성자 (배식차 만들기)
  public BoardList(int capacity) {
    if (capacity > DEFAULT_CAPACITY && capacity < 100000) {
      this.list = new Board[capacity];
    } else {
      this.list = new Board[DEFAULT_CAPACITY];
    } 
  }
  
  //메서드 3개
  public Board[] toArray() {
    Board[] arr = new Board[this.size];
    
    for (int i = 0; i < this.size; i++) {
      arr[i] = list[i];
    }
    return arr; //return Board[] list = 오리지널 리턴하는 거. 빈곳도 전체가 다 옴. / 값이 담긴 것만 
  }
  
  public void add(Board board) {
    this.list[this.size++] = board;
    //아래 두개를 합치면 위에 명령
    //this.list[this.size] = board;
    //this.size++;
  }
  
  public Board get(int no) {
    for (int i = 0; i < this.size; i++) {
      if (this.list[i].getNo() == no) { // 변경 //list에 보드객체의 주소가 들어가 있다. 
        return this.list[i]; //변경
      }
    }
    return null;
  }
  
  
}

-----------------------------
<보드핸들러>
package com.eomcs.lms.handler; // 자기가 직접 배열을 만들일이 없음

import java.sql.Date;
import java.util.Scanner;
import com.eomcs.lms.domain.Board;

public class BoardHandler {

  BoardList boardList; // 추가
  Scanner input;


  {
    boardList = new BoardList(); //변경  ()괄호안에 원하는 숫자 넣어서 보드 배열 크기 정해줄수있음 // 밑에 두개에 자동으로 넣어짐
  }

  public BoardHandler(Scanner input) {
    this.input = input; // 인풋값 파라미터로 받아야 해서 위로 올릴 수 없음
  }

  public BoardHandler(Scanner input, int capacity) { //변경
    this.input = input;
  }


  public void addBoard() { 
    Board board = new Board();

    System.out.print("번호? ");
    board.setNo(input.nextInt()); 
    input.nextLine(); 

    System.out.print("제목? ");
    board.setTitle(input.nextLine());

    board.setDate(new Date(System.currentTimeMillis()));
    board.setViewCount(0);

    boardList.add(board); //변경

    System.out.println("저장하였습니다.");
  }


  public void listBoard() { //변경
    Board[] boards = boardList.toArray(); 
    for (Board b : boards) { //향상된 for문
      System.out.printf("%d, %s, %s, %d\n", 
          b.getNo(), b.getTitle(), b.getDate(), b.getViewCount());
    }
  }


  public void detailBoard() {//변경
    System.out.println("게시물 번호? ");
    int no = input.nextInt();
    input.nextLine(); //숫자 뒤에 남은 공백 제거

    Board board = boardList.get(no); // 변경

    if (board == null) {
      System.out.println("게시물 번호가 유효하지 않습니다.");
      return; //메소드의 리턴타입이 void일 경우 그냥 리턴만 쓰면 중단됨
    }

    System.out.printf("번호: %d\n", board.getNo());
    System.out.printf("제목: %s\n", board.getTitle());
    System.out.printf("등록일: %s\n", board.getDate());
    System.out.printf("조회수: %d\n", board.getViewCount());
  }
}
=======================================================================

16번 버전 2

<보드핸들러>

package com.eomcs.lms.handler; // 자기가 직접 배열을 만들일이 없음

import java.sql.Date;
import java.util.Scanner;
import com.eomcs.lms.domain.Board;

public class BoardHandler {

  BoardList boardList;
  Scanner input;
  
  
  public BoardHandler (Scanner input) {
    this.input = input;
    boardList = new BoardList();
  }
  
  
  public BoardHandler(Scanner input, int capacity) {
    this.input = input;
    boardList = new BoardList(capacity);
  }
  
  
  public void addBoard() { 
    Board board = new Board();

    System.out.print("번호? ");
    board.setNo(input.nextInt()); 
    input.nextLine(); 

    System.out.print("제목? ");
    board.setTitle(input.nextLine());

    board.setDate(new Date(System.currentTimeMillis()));

    board.setViewCount(0);

    boardList.add(board);
    
    System.out.println("저장하였습니다.");
  }


  public void listBoard() {
    Board[] boards = boardList.toArray();
    for (Board b : boards) { 
      System.out.printf("%d, %s, %s, %d\n", 
          b.getNo(), b.getTitle(), b.getDate(), b.getViewCount());
    }
  }
  
  
  public void detailBoard() {
    System.out.println("게시물 번호? ");
    int no = input.nextInt();
    input.nextLine(); //숫자 뒤에 남은 공백 제거
    
    Board board = boardList.get(no);
    
    if (board == null) {
      System.out.println("게시물 번호가 유효하지 않습니다.");
      return; //메소드의 리턴타입이 void일 경우 그냥 리턴만 쓰면 중단됨
    }
    
    
    System.out.printf("번호: %d\n", board.getNo());
    System.out.printf("제목: %s\n", board.getTitle());
    System.out.printf("등록일: %s\n", board.getDate());
    System.out.printf("조회수: %d\n", board.getViewCount());
  }
  
}

---------------------

<보드리스트>

package com.eomcs.lms.handler;
// 보드리스트를 뽑아낸 이유: 
//보드리스트는 데이터만 갖고 있고 아무것도 안하고 있음
//데이터 값을 다루는 연산자가 필요 (add list detail 메서드)
//>얘도 핸들러에서 빼옴
import com.eomcs.lms.domain.Board;

public class BoardList {

  
  static final int DEFAULI_CAPACITY = 100;

  Board[] list;
  int size = 0;

  //(기본생성자 자동생성됨)

  //생성자
  public BoardList() {
    this.list = new Board[DEFAULI_CAPACITY];
  }
  
  //생성자
  public BoardList(int capacity) {
    if(capacity < DEFAULI_CAPACITY || capacity > 10000)
      this.list = new Board[DEFAULI_CAPACITY];
    else
      this.list = new Board[capacity];
  }

  //메서드 (연산자) 보드리스트꺼내는 기능
  public Board[] toArray() {
    Board[] arr = new Board[this.size];
    for (int i = 0; i < this.size; i++) {
      arr[i] = this.list[i];
    }
    return arr;
  }

  //메서드 (연산자) 배열에 담는 일도 보드리스트가 한다.
  public void add(Board board) {
    this.list[this.size++] = board;
  }
  
  
  // 메서드 (연산자) 디테일
  public Board get(int no) {
    for (int i = 0; i < this.size; i++) {
      if (this.list[i].getNo() == no) {
        return this.list[i];
      }
    }
    return null;
  }
  
  
}


===============================================

익숙해져야 이해가 된다!!

========================

16번버전 3 3단계(마지막단계)

배열 최대로 만들수 있는거 21억임..

package com.eomcs.lms.handler;
import java.util.Arrays;
//보드리스트는 데이터만 갖고 있고 아무것도 안하고 있음
//데이터 값을 다루는 연산자가 필요 (add list detail 메서드)
//>얘도 핸들러에서 빼옴
import com.eomcs.lms.domain.Board;

public class BoardList {


  static final int DEFAULI_CAPACITY = 3; //1개 더 add하려고 하면 ArrayIndexOutOfBoundsException: 뜸

  Board[] list;
  int size = 0;

  //(기본생성자 자동생성됨)

  //생성자
  public BoardList() {
    this.list = new Board[DEFAULI_CAPACITY];
  }
  //생성자
  public BoardList(int capacity) {
    if(capacity < DEFAULI_CAPACITY || capacity > 10000)
      this.list = new Board[DEFAULI_CAPACITY];
    else
      this.list = new Board[capacity];
  }

  //메서드 (연산자) 보드리스트꺼내는 기능
  public Board[] toArray() {
    /*
    Board[] arr = new Board[this.size];
    for (int i = 0; i < this.size; i++) {
      arr[i] = this.list[i];
    }
    */
    return Arrays.copyOf(this.list, this.size); //새 배열을 만들고 기존 배열에서 사이즈 3개만큼 복사한다. // 클래스스태틱메소드다. 인스턴스없이 ㅏ로 실행하는 경우. 배열을 다루는 클래스다. Arrays 클래스 안에는 배열을 다루는 메서드가 잔뜩 있고 그중에 하나 쓴거다.
  }



  //메서드 (연산자) 배열에 담는 일add도 보드리스트가 한다.
  public void add(Board board) {
    if(this.size == this.list.length) {
      // 현재 배열에 게시글 객체가 꽉 찼으면 배열을 늘린다.
      int oldCapacity = this.list.length;
      int newCapacity = oldCapacity + (oldCapacity >> 1); //oldCapacity / 2;보다 속도가 빠르다
      /*
      Board[] arr = new Board[newCapacity];
      for (int i = 0; i < this.list.length; i++) {
        arr[i] = this.list[i];
      }
      this.list = arr; // 새배열의 주소를 담는다. list에
      */
      this.list = Arrays.copyOf(this.list, newCapacity); //새배열의 주소를 list에 넣는다
      System.out.printf("새 배열을 %d개 생성하였음", newCapacity);
    }
    this.list[this.size++] = board;
  }


  // 메서드 (연산자) 디테일
  public Board get(int no) {
    for (int i = 0; i < this.size; i++) {
      if (this.list[i].getNo() == no) {
        return this.list[i];
      }
    }
    return null;
  }


}






=================================


16번까지 백업하고 마이프로젝트하기

이전거 안보고 고칠 수 있도록 암기 복습
프로젝트에 적용되는 문법은 무조건 암기!!


마이프로젝트 16번 하고 복습하기

3장 연산자 풀고 모르는거 정리해서 공유하기










