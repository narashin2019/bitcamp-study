package com.eomcs.util;
//27) grow() 메서드에서 새 배열의 크기를 계산 코드를 newCapacity() 메서드로 분리한다. 
import java.util.Arrays;

public class ArrayList<E> {

  private static final int DEFAULT_CAPACITY = 2;

  //뉴 했을떄 만들어지는 메모리의 설계도 = 인스턴스 필드. 초기화 필요없다.
  Object[] elementData;
  int size;

  //생성자
  public ArrayList() {
    this.elementData = new Object[DEFAULT_CAPACITY];
  }

  //생성자
  public ArrayList(int initialCapacity) {
    if(initialCapacity < DEFAULT_CAPACITY)
      this.elementData = new Object[DEFAULT_CAPACITY];
    else
      this.elementData = new Object[initialCapacity];
  }




  //목록의 특정 위치에 저장된 항목을 꺼내주는 get()
  @SuppressWarnings("unchecked")
  public E get(int index) {
    if (index < 0 || index >= this.size) {
      return null;
    } return (E) this.elementData[index]; 
      //타입캐스팅(E) 실행할 때 저장되는 값의 리턴타입이 결정된다. 
      //스트링이면 스트링인지 아닌지 컴파일러가 다 검사함.
  }


  //목록의 특정 위치에 저장된 항목을 바꾸는 set() // 리턴값은 예전 항목이다. // 원치않으면 리턴 안받으면 된다.
  @SuppressWarnings("unchecked")
  public E set(int index, E e) {
    if (index < 0 || index >= this.size) {
      return null;
    }
    // 바꾸기전 항목을 따로 보관해 둔다. 필요할 수 있다. 
    E oldValue = (E) this.elementData[index];
    this.elementData[index] = e;
    return oldValue;
  }


  //목록의 특정 위치에 저장된 항목을 삭제하는 remove() // 리턴값은 예전 항목이다. // 원치않으면 리턴 안받으면 된다.
  @SuppressWarnings("unchecked")
  public E remove(int index) {
    if (index < 0 || index >= this.size) {
      return null;
    }
    
    //삭제할 항목을 따로 보관해 둔다. 필요할 수 있다.
    E oldValue = (E) this.elementData[index];
    
    System.arraycopy(this.elementData, index + 1, 
        this.elementData, index, this.size - (index + 1));
    /*
    for (int i = index + 1; i < this.size; i++) {
      this.elementData[i - 1] = this.elementData[i];
    }
    */
    
    this.size--;
    return oldValue;
  }
  
  
  public int size() {
    return this.size; //this는 생략가능. this변수에 들어있는 size
  }
  
  
  public Object[] toArray() {
    return Arrays.copyOf(this.elementData, this.size);
    /*
    Object[] arr = new Object[this.size];
    for (int i = 0; i < this.size; i++) {
      arr[i] = this.elementData[i];
    }
    return arr;
    */
  }