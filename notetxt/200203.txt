200203 월요일

<지난시간 정리>

*디자인패턴: 어떤 구조로 코드를 짜야 기능을 변경 추가 삭제하기 쉽냐

*기능을 추가: 상속(확장) -> 한계

*observer 패턴!

어떤 객체가 있는데 어떤 상태에 놓였을 떄 작업을 추가하고 싶다.
Car라는 객체가 start()라는 기능을 수행할 때 기능을 추가하고 싶다.  

-옛날방식: 
기존 코드에 소스코드 추가.
기존 클래스가 계속 변경 됨.
나중에 해당 코드를 제거 하려면? 
주석이 잘되어 있어도 쓰레기 코드가 남아있을 수 있음.

-객체가 어떤 상태에 놓을때(어떤 메소드가 호출될때) 실행될 코드를
직접 집어넣지 말고 별도 클래스로 분리를 시키자. 
별도의 클래스로 만든 것을 메서드가 호출할 때 그냥 호출하지 말고,
호출하는 메서드의 규칙 = 호출 규칙을 별도의 인터페이스로 만들자 = 옵저버

(1)은 Car객체의 start() 상태에만 관심있다. 

1. 호출규칙 정의. (Observer - 인터페이스)
2. 관찰자 등록 (메서드와 필드) (Car 클래스에에 remove/addObserver, List<Observer>)
3. call 특정상태에서 호출하는 코드 삽입
4. Helper클래스정의 (추상클래스 AbstractObserver 상속받아 관심있는 메서드만 구현하도록)
5. 기능 구현


-스프링프레임워크 등 다 이런 패턴 적용됨. 

-향후 애플리케이션 시작할 때 데이터 로딩이외에도 
다른 작업을 하지 않을까? 라는 생각에
디자인 패턴 적용.

------------------------------------------------------


비트캠프프로젝트 v31-2 백업완료
v31_3 끝

/////////////////////////////////////////////////////////////////////////////

v32 파일01
> 네트워크 드라이브 직접 접근/ 각 로컬에 프로그램 설치 사용 구조의 문제점
파일 동시접근 시 문제 발생.

> 해결책?
App프로그램을 둔다.
파일관리, 요청처리 하는 프로그램을 별도로 둔다.

> 어떤 기술이 필요한가?
요청 - 작업수행 - 응답
네트워킹 기술!

다른 프로그램의 메모리의 직접 접근하면 안된다.

*네트워킹
-프로그램과 프로그램 사이에 데이터를 주고 받는 기술

*client /server 개념


*이제 할일: 데이터 관리 프로그램을 별도의 프로그램으로 분리하고 그게 서버가 되는 것.

CRUD요청
응답

serverApp : data 처리 (파일과 I/O)
client App : ui처리



###폴더2개 생성하기 server/client

****git bash

cd 엔터
pwq 엔터
cd git
cd bitcamp-study 들어감
ls 엔터
mkdir bitcamp-project-client/server 엔터
ls 엔터로 확인

cd *client로 방들어감
gradle init : 프로젝트 초기화 2/3/1/1/엔터/ com.eomcs.lms/


비주얼스튜디오로 가서

***buildgradle파일에서 주석 지우고

plugins {
    id 'java'
    id 'eclipse'
}

tasks.withType(JavaCompile) {
    // 프로젝트의 소스 파일 인코딩을 gradle에게 알려준다. (그레이들이 컴파일 시 나 대신 -encoding utf8옵션넣어서 해주는 것)
    options.encoding = 'UTF-8'

    // 소스 파일을 작성할 때 사용할 자바 버전
    sourceCompatibility = '1.8'

    // 자바 클래스를 실행시킬 JVM의 최소 버전
    targetCompatibility = '1.8'
}

repositories {
     jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:28.0-jre'
    testImplementation 'junit:junit:4.12'
}



이렇게 만듬

***

git bash로 가서
ls로 확인 후

gradle eclipse 엔터

----------

이클립스에서 임포트 후 
-com.eomcs.lms;/ App -> ClientApp.java로 바꿈

-ser/main/resoursces에 README.md파일 추가 (내용: 자바 애플리케이션이 사용할 기타 자원을 두는 폴더)
-src/test/resources에 README.md복사 (내용: 자바 단위 테스트에서 사용할 기타 자원을 두는 폴더)

-src/test/자바 컴 엄씨에스 엘엠에스 앱테스트자바를 ClientAppTest로 바꾸고 주석 막음 


-package com.eomce.lms; public class ClientApp 파일 변경 
"System.out.println("클라이언트/ 서버 수업 관리 시스템입니다.");"
--------------------

기존 소스 백업 32_1로 리드미 복사 

------------------------------

$ ipconfig 로 파워셀에서 ip주소 확인 가능

$ ipconfig /all

- IPv4 주소 . . . . . . . . . : 192.168.1.48(기본 설정) : 사설 아이피


-네이버에서 내아이피주소확인 누르면 이 컴퓨터의 IP주소는 1.220.120.66입니다.라고 뜸. 건물마다 같은 아이피 (공인아이피)
외부에서 내 컴퓨터를 볼 때 이 주소를 봄.


-내부에서 구분:
내 랜카드를 네트워크인터페이스카드 고유번호는 다 달라. 전세계 모두 다 달라.
사람으로 따지면 디앤에이 정보 와 같음.
최종 목적지를 랜카드 고유번호로 지정.




-------------------------------------------------

서버앱은 이클립스에서 하고
클라이언트는 파워셸또는 cmd(깃배쉬-옵션 텍스트 D2Coding / KR / Default 하고 다시껐다 키면 한글 안꺠짐)에서 
폴더까지 들어가서
java -cp bin/main com.eomcs.lms.ClientApp 로 실행


클라이언트앱에서 locahost에 로컬 할 사람의 ip주고 넣고
클라이언트 사람이 java -Dfile.encoding=UTF=8 -cp bin/main com.eomcs.lms.ClientApp /
>방화벽때문에 안되어서 이클립스로


192.168.1.10 강사님 10번 






















