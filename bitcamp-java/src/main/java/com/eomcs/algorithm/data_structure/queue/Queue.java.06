package com.eomcs.util;

public class Queue extends LinkedList<Object> implements Cloneable{ //상속이 먼저!

  public void offer(Object value) { //큐에서 애드는 오터
    this.add(value);
  }


  public Object poll() {//큐에서 겟은 폴
    return this.remove(0); // 스택이나 큐는 값을 아예 꺼내는 것. 조회만 하는게 아님. 따라서 꺼내고 그장소가 없어짐. 원본배열에서 꺼낸걸 없애버림!! 쉘로우
  }


  /*
@Override
  public Queue clone() {
    try {

      // 단순히 객체의 인스턴스 변수를 복제하는 sallow copy수행
      // => Object의 clone()은 sallow copy를 수행
      // => Queue에서 poll()을  수행하면 first노드를 삭제하게 되고.
       //   이때 원본 객체의 노드의 링크 ㅓㅇ보를 변경하게 된다.
      // => 따라서 다음에 다시 복제를 수행하면.
      //    원본 노드의 링크 정보가 제거 되었기 때문에 제대로 작업을 수행할 수 없다.
      // 해결책
      // => 원본 객체가 사용하는 노드도 함께 복제해야 한다.
      // => 즉 'deep copy'를 수ㅐㅇ해야 한다.
      // 셀로우카피하면 큰ㅇ일나는 경우 노드까지 그대로 복사해야함 
    return (Queue) super.clone();
    } catch (CloneNotSupportException ex) {
      System.out.println(ex);
      return null;
    }
   */


  @Override
  public Object clone() {
    // 'deep copy' 수행
    // => 스택의 경우 배열을 복사하면 되기 떄문에 
    //    기존의 'sallow copy'를 수행한 후 배열을 따로 복사하였다.
    // => LinkedList의 경우 노드와 노드 사이를 연결해야 하기 때문에
    //    단순히 'shallow copy'를 수행해서는 안된다.
    // => 그냥 다음과 같이  새 Queue를 만들고, 
    //    기존 Queue에 저장된 값을 꺼내서 새 Queue에 저장해야 한다.

    Queue temp = new Queue()

        for (int i = 0 ; i < this.size(); i++) {
          temp.offer(this.get(i));
        }


    return super.clone();
  }

}


}
