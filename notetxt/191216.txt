191216
<정리>

*Literal

10 4바이트
10L 8바이트
3.14f 4바이트 7
3.14 8바이트 15
false true
65, 0x41, 'A', '\u0041'(유니코드는 2바이트)

"ABC" 

*Variable
정수 : byte short int long
부동소수점: float double
논리: boolean(내부에서 4바이트 int로 다뤄짐, 논리의 배열일때는 1바이트로 다뤄짐)
문자: char 2바이트 0~65535
=> primative data type


String s;
Date d;
...
=> reference



*Array

int a, b, c;
int[] arr = new int[3]; 
우항: 배열의 인스턴스instance / 같은타입의 4바이트 메모리를 연속해서 확보. 0부터 시작되는 번호 붙임
좌항: 배열의 레퍼런스reference / 인트 배열의 주소를 담는 변수가 필요. 얘도 하나의 메모리. 주소가 저장되는 메모리의 이름이 arr

JVM이 실행을 하게 되면 OS가 관리하는 램중에서 
사용할 수 있는 일부를 분양해줌.
JVM은 실행동안 분양받은 메모리 사용.
메모리의 시작점 0으로 본다면, 100번째 떨어졌다면 100번지. 
특정위치를 기준으로 얼만큼 떨어져 있다 = offset address

int[] arr2;
arr2 = arr; 
// arr에 들어있는 주소를 arr2에 저장하라.
arr[0], arr2[0], 두개가 같은 걸 가리킴

arr[1]=220;
arr2[1]=300; //같은 방에 있는 값바꾼것


arr = new int[5]; // 다른 배열메모리 만듬. 주소가 4720. arr주소가 바뀜
arr[2] = 1201;
arr2 = new int[2]; // arr2주소바뀜
arr2[1] = 100;

기존에 만들었던 배열은 주소를 아무도 모름
배열에 레퍼런스가 없는 상태.
사용할수 없는 상태.
= garbage

JVM종료할때까지 계속 남아있는데 
메모리가 부족하면 가비지를 지움
=garbage collector

*배열과 함께 쓰는 for문


*우리가 배우는 문법은 메모리에 들어있는 값을 통제하는 문법

*객체지향: 추상화 상속 다형성 캡슐화

=================================================

*bitcamp-study\bitcamp-java\src\main\java\com\eomcs\basic\ex04\ Exam62 ~ 93

*eomcs-java; 저장소이자 프로젝트 폴더(build.gradle이 있는곳). 

이클립스는 저장소가 아니라 프로젝트를 임포트

*bitcamp-study\bitcamp-java\src\main\java\com\eomcs\basic\ex05\ Exam01_1 ~ Exam03_6

*한 언어를 깊이하면 한언어만 해도 되고 언어를 얇게 알면 여러 언어 알아야 한다.

* ex05/assignment/Test01

입력? 3 7
3에서 7까지의 합은 ~ 입니다.


* ex05/assignment/Test02

입력? 7 4 12 8 9
최소값: 4
최대값: 12





