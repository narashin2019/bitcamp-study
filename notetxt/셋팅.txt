0. command line interface(CLI) 텍스트 명령어로 운영체제를 제어함. (ex)powershell, 터미널
powershell을 쓰는 이유: 윈도우 기반에서 리눅스의 기능을 사용할 수 있음
★shell script: shell 프로그램을 통해서 명령어를 기술할 때 사용하는 언어
윈도우 패키지 관리자 scoop 설치 ->개발 프로그램 설치에 용이함
 scoop 설치 명령어 : iwr -useb get.scoop.sh | iex
 scoop 삭제 $ del .\scoop -Force
 git 설치 명령어 : scoop install git

1. 형상관리시스템 git/svn/cvs 
-github.com 저장소 준비
회원가입-회원 인증 메일 확인-로그인-'bitcamp-study' 저장소 생성
-개발 PC에 github.com의 저장소 복제
$ : command line에 명령어를 입력하라는 뜻
1. $ mkdir git 마지막 경로(user 폴더)에 git이라는 폴더를 만들어라(c:\Users\user\git 저장소 복제할 폴더 생성)
2. $ cd git
3. $ git clone 깃허브_저장소_주소   ---> github 사이트 저장소의 주소를 복붙하면 git폴더에 저장소가 복제됨
4. $ cd b*   b로 시작하는 폴더를 찾아 이동해라
5. $ dir      폴더 안의 파일을 보여줘라   readme.md
6. $ ls -Force   숨겨진 파일까지 다 보여줘라   readme.md + .git 이라는 디렉토리가 보임(맨앞 d--로 시작)

- 파일 추가하기 : bitcamp-study 폴더에 test1.txt 파일을 만들고 서버에 업로드하기
1. 텍스트 파일 생성(새로 만들기- 텍스트 문서)
2. $ git push 하면 깃허브 로그인창이 뜸 ----->실패함 왜? .git폴더에는 텍스트파일이 없기 때문에
3. 로컬(PC) 저장소에 백업 대상 목록 작성 : $ git add test1.txt ---->업로드 한게 아님. 목록만 올린 것
4. $ git commit -m "업로드 테스트(저장하는 이유)"  : 로컬 저장소에 백업
--> 누가 했는지 말해줘요 라는 창이 뜸
->로컬 git 사용자 정보 설정
이메일 $ git config --global user.email "eunhdev@gmail.com"
이름 $ git config --global user.name "jeoneunhye"
정보 등록 후 $ git commit -m 명령어로 다시 저장.
5. $ git push   : 로컬 저장소의 내용을 git 서버에 업로드함 (.git 폴더에 백업된 것만을 서버에 올릴 수 있다)

-파일 삭제하기 : 로컬에서 지우고 그 지운 내용을 서버에 백업
1. 텍스트 파일 휴지통에 삭제
2. $ git add .
(test1.txt 대신 . 사용 : 현재 폴더와 하위 폴더의 모든 파일을 말함. 꼭 bitcamp-study 폴더 경로에 놓고 치기)
3. $ git commit -m "텍스트 파일 삭제"
4. $ git push

-깃폴더 삭제와 복구
1. C:\Users\user\git폴더 경로로 지정해놓고 $ del .\bitcamp-study\ -Force -Recurse (로컬에서 삭제o 서버x)
2. $ git clone https://github.com/jeoneunhye/bitcamp-study.git


-서버의 파일 변경사항을 가져오기(pull)
cd 명령어로 clone된 그 경로로 가서 $ git pull

C:\Users\user\git> git clone https://github.com/eomjinyoung/bitcamp-20191202.git
C:\Users\user\git> cd .\bitcamp-20191202\
C:\Users\user\git\bitcamp-20191202> git pull


*$ ls=dir 경로 안의 파일을 보여줌
$ pwd 현재 경로를 보여줌

*다른 서버의 파일을 옮겨올 때 .gitignore 파일도 가지고 온다
(.gitignore 서버에 백업해서는 안되는 파일이 기록돼있음. git add했을 때 무시됨)

*cvs -> subversion(svn) -> git
형상관리시스템과 웹하드와의 차이: git은 변경 내용이 기록된다(오류 복구가 가능)
csv와 subversion(svn)의 차이: csv는 변경내용이 있는 파일 전체가 업로드 됨. subversion은 파일의 변경 내용만을 업로드가 가능
git은 파일과 변경내용기록 전체가 든 repo.(repository)를 통째로 로컬에 복제하므로 서버가 날아가도 ㄱㅊ 

2. 편집도구 IDE(integrated development environment)-eclipse, visual studio code //intelliJ는 기업이 많이 씀
: 소스 코드를 편집하기 위해 설치
-visual studio code(VSCode)
일반 및 개발용 편집기
자바스크립트로 만든 프로그램
크롬 웹 브라우저를 기반으로 실행된다
소스 코드(.java, .html, .css, .js 등)를 편집하기 위해 설치
물론 일반 텍스트(.txt, .md 등)를 편집할 때도 사용한다.
구글 검색해서 다운로드

3. 개발도구 JDK(Java development Kit) - GraalVM(진짜 기계어로 변환이 가능. openJDK의 상위 호환)
-graalVM
유니버셜 가상 머신 JVM, NodeJS 포함
graalvm.org 사이트에서 java11버전 다운로드 graalvm-ce-java11-windows-amd64-19.3.0.zip
c:\bitcamp\에 압축 푼다.
★graalvm의 bin 폴더를 실행 경로(path)에 추가한다.
왜? path에 추가해놓으면 아무 디렉토리에서나 해당 폴더의 프로그램을 실행할 수 있다
등록 안하면? 해당 프로그램의 위치를 모르기때문에 실행할 수 없다.
등록 방법은? 실행-시스템 환경 변수 편집 검색하여 해당 프로그램 실행
고급-환경변수 버튼 클릭하고 시스템 변수 목록에서 path 변수의 값에 graalVM의 bin 폴더를 추가한다.
새로 만들기 C:\bitcamp\graalvm-ce-java11-19.3.0\bin 복붙하고 맨 위로 이동(제일 우선순위로 만들어줌)
(binary 폴더에는 자바의 명령어가 들어가 있다. 변수 설정 후 명령어 java -version하면 안뜨던 게 제대로 뜸!)
★graalvm이 설치된 폴더는 JAVA_HOME 이름으로 환경 변수에 등록한다.
자바 프로그램 중에서는 JDK(JRE)를 찾을 때 JAVA_HOME으로 등록된 경로를 찾기 때문이다.
JDK(자바 개발 도구)를 설치한 후에는 반드시 이 환경 변수에 설치 디렉토리의 경로를 등록하라!
시스템 변수 목록-새로 만들기-JAVA_HOME이라는 이름을 graalvm을 설치한 디렉토리를 지정한다.
C:\bitcamp\graalvm-ce-java11-19.3.0
$ echo $env:JAVA_HOME   : JAVA_HOME 설정된 주소 불러와줘 ->결과값 C:\bitcamp\graalvm-ce-java11-19.3.0
$ cd 폴더이름 : change directory 지정한 폴더로 경로 이동
$ dir : 마지막 경로 안의 파일목록이 나옴



gradle 설치 명령창에서 scoop install gradle


