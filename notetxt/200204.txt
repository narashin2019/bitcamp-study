200204 화요일

* 클라이언트가 보낸 데이터 읽고 응답메시지 전송하기 (어제)


*(사진1)
 기존의 App은 우리가 입력하는 명령어에 따라 app이 어떻게 처리할 지
app -> command객체를 실행
예) /board/list명령어라면 -> BoardListCommand의 excute()호출 ~커맨드는 입출력 담당
커맨드는 사용자와 어플리케이션 중간에서 매개해준다 = 유저인터페이스 user interface

실제 데이터 보관 처리는 List가 담당 -> 이부분을 쪼개서 공유하겠다! 

*(사진2)

ClientApp Command ServerApp List

서버앱에서 리스트를 관리 보드,멤버,레슨리스트.
커맨드가 서버앱으로 요청, 서버앱이 커맨드로 응답.
ㅇ

앞부분은 같고 뒷부분이 다르다

비트캠프 프로젝트를 ~ 서버/ ~ 클라이언트로 쪼갠다.

명령보내기처리하기 커맨드와 서버앱 사이의 규칙 필요.

-------------------------------------------------------------------
####비트캠프프로젝트 클라이언트Client
# 32_3 - 게시물 관리에서 UI 기능을 분리하여 클라이언트에 적용하기

* 오늘 쪼개는 것 하겠다. 
*현재 ClientApp밖에 없음.
게시판 옮겨봅시다.

로컬변수로 해도 되면 인스턴스변수 말고 로컬변수로 하자. (큐, 디큐)

####비트캠프프로젝트 서버
# 32_3 - LMS 관리 데이터를 파일에서 로딩하고 파일로 저장하기


------------------------------------------------------------------

####비트캠프프로젝트 서버
# 32_4 - 클라이언트의 게시물 관리와 관련된 데이터 요청을 처리하기 

public class ServerAppTest {
localhost
9999
/board/list
등 실행


*출력을 할거면 출력도구를 먼저 생성
*읽기를 할 거면 읽기도구를 먼저 생성


#### 비트캠프프로젝트 클라이언트
# 32_4 - 서버에 게시물 데이터를 요청하는 기능을 추가하기

192.168.1.45


네트워크통신에서 응답이 없을떄는 flush()했나 찾아봐라.

오브젝트 아웃풋 스트림은 캐쉬된 객체를 보냄.


************
TCP/IP // DAO로 분리 RMI가 최종점
----------

update delete

서버리드미 바꾸고
서버앱 바꾸고 
클라이언트리드미바꾸고
~커맨드바꾸고 
클라이언트앱에 커맨드맵추가




