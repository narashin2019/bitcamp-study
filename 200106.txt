200106 월요일

저번주에 배웠던것:

회원정보를 다루기 위해 만든 Member라는 클래스
클래스 이름에다가 사각형 치면 클래스

이 클래스가 누굴상속받는지 지정하지 않으면 java.lang.Object라는 클래스를 상속받음
class Member extends Object {}

모든 클래스는 오브젝트의 자손

클래스 이름으로 클래스가 하는일 짐작가능.

오브젝트라는 클래스는 인스턴스를 다루는 일을 하는구나.
ex)
toString()
equals()
hashcode()
finalize()
...

오브젝트 클래스에는 (객체)인스턴스를 다루는 메소드 들어가 있음.
자바의 모든 클래스는 오브젝트 클래스를 상속받았기 때문에 위의 메소드 다 쓸 수 있음.
결국에 따라올라가면 젤 꼭대기는 오브젝트.

클래스이름과 같은 이름을 가진 메소드 리턴타입없음 인스턴스만들때 한번 호출 = 생성자

생성자 파라미터가 없는 생성자 Member() {} 기본생성자. 
생성자 없으면 기본생성자 자바 컴파일러가 만듬
Member(int a) {} => 이거 있으면 기본생성자 안만들어짐

모든 클래스는 한 개 이상의 생성자가 존재한다.


생성자 안에 첫문장으로 수퍼클래스의 어떤 생성자 호출할 지 정해놓지 않으면.
컴파일러는 super(); 형식으로 첫줄에 자동으로 삽입한다.

멤버 클래스 {
name
tel
id
email
psw } 라 치자


그 하위에 티쳐와 학생이 있다. 티쳐와 학생에는 다른 변수가 있다. (시간당 강사료. 재직자여부... 등)
나머지는 멤버의 변수를 그대로 사용
이때 상속이라는 것을 이용

기존의 코드를 그대로 사용하면서 거기에 새로운 변수 추가 가능.

개발자가 기본생성자만 적으면 그 안에 슈퍼클래스를 호출하는 기본생성자가 드어감 super();

왜?
new Teacher(); 하면
payoffer name tel id pwd wmail 메모리 전부 만들어짐
티처클래스 설계도 + 멤머 클래스 설계도 레 따라 만들어진 메모리.

멤버 설계도에 따라 만든 메모리는 멤버 생성자가 초기화 시키는게 당연.

따라서 수퍼클래스의 메모리 초기화 시키는 문장(수퍼클래스의 생성자)이 젤 첫줄에  들어가는 것,. super();

어떤 생성자든첫줄은 수퍼클래스의 생성자 호출해야함. 
개발자가 적지 않으면 기본 생성자 들어가고,.
개발자가 어떤 파라미터 들어가는 생성자 골라서 첫줄에 적어도 됨.


인스턴스 생성시 생성자를 호출하게 되어 있는데
생성자의 첫문장으로 수퍼 클래스의 생성자 호출되기 떄문에
수퍼 클래스의 생성자 호출하면서
해당 클래스(서브클래스) 생성자도 호출됨.
각각 초기화는 당사자 클래스가 하는 것. 

*
멤버의 인스턴스에 들어있는 값을 간단히 문자열로 출력할 때 : toString()
오브젝트에 선언된 투 스트링을 그대로 쓰면  "클래스명@해시코드" 이런 문자열을 리턴함. 

인스턴스 멤버 값을 그냥 출력하고 싶어.

그러면 그냥 쓰지말고 재정의 해야함.

서브클래스에 맞게끔 수퍼클래스의 메서드를 다시 정의함(오버라이딩)

=>> 
@Override
String to String (){

}


*개발자가 오타치는걸 미연에 방지하기 위해 특별한 주석 허용함
컴파일러에게 내리는 명령. 이거 수퍼클래스 메서드 오버라이딩하는데 오타있나 봐줭.
@Override
이렇게 컴파일러에게 알려주는 특별한 주석을 "애노테이션"이라고 부름.


* 구분자 . / : 에 따라 리턴하는 걸 달리 하고 싶다

String to StringWithDelimeter(Sting d) {

}


=>S =  toStringWithDelimeter(":"); 로 호출

**오버로딩***
*근데 파라미터는 달라도 둘이 같은 일을 하는 메서드는 같은 이름을 같게 함. 
=>S =  toString(); 디폴트는 콤마
=>S =  toString(":"); 로 호출시 :로 구분 (toString(Sting delimeter) {) 로 메서드 쓰면됨)
둘다 하는 일은 결구 멤버인스턴스의 값을 문자열로 바꿔 리턴하는 역할.





*
Member m = new Mamber();
Teacher t = new teadner();
Student st = new Student();

m <-- t;
m <-- st; 

티쳐와 스튜던트 모두 멤버라 부를 수 있다.

멤버로 티쳐와 스튜던트 가리킬 수 있다.
m = t;
m = st;


*비교를 하는데, 멤버클래스 만드는 개발자가 두 멤버가 같은지 비교하고 싶어.

boolean equals(Objext obj) {}

예를 들어
Membet m1, m2;
m1 = new Member();
m2 = new Member();
있다. 

boolean check = m1.equals(m2); => 이건 false 나옴

=> 오버라이딩 기술 활용하여 다시 재정의 한다.

어떤 참조변수는 그 서브클래스의 인스턴스를 가리킬 수 있다 
=> 폴리모픽 베리어블 = 다형적 번수 polynorphic variable


* 티쳐에서 멤버에서 오버라이딩 한  toString() {}을 다시 오버라이딩 할떄.
기존것 가져오고 싶으면 (수퍼클래스에서 메서드를 찾고 싶으면 super.으로 / 현재 클래스에서 메서드 찾고 싶으면 this.)
 toString() {
Strinf s = suoer.toString();
return S+ "," +payoffer;
}



*hashcode
인증서가 해쉬코드
나를 대표하는 식별자 = 인증서 = 고유의 정수값있음.
그걸 관리하는게 한국금융결제원.

톰캣서버 다운받을 때 내가 다운받은게 중간에 가로채진게 아닌가 의심될 때.
프로그램에 대해 식별자값 올려놓고, 다운받은 쪽에서도 해시코드 뽑아내서
서버에 올라가있는 번호아 일치하는지 봐서 아 같은 파일인지 아닌지 알 수 있음

해시코드 =데이터에 부여한 고유값, 주민번호.

데이터(덩어리) ==== 알고리즘======>128bit 512bit 1024 bit숫자 뽑아냄.(해쉬코드)

해쉬코드를 뽑아내는 알고리즘 : 해쉬알고리즘 
ex) SHA-1SHA-256 SHA-512 MD-4 MD-5 등..


숫자가 작으면 두 데이터(의 해쉬코드가)가 같아질 확률이 높음(서로 다른 데이터 임에도)

데이터 덩어리가 2기가 20억바이트라면?
=>작은 숫자로 표현함.
=> 데이터가 달라도 같은 번호가 나올 가능성이 있다.
=> 번호가 작으면 작을 수록 같은 번호가 나올 가능성이 높아짐.
=> 안전한 것은 길면 길수록 낫다.
=> 장점: 두 개 데이터가 일치하는 지 비교하는 것이 간단해진다.
=> 단 중복될 가능성은 있다. 같다고 잘못 판단할 가능성은 있지만! 
=> 하지만 두 데이터를 비교하는 속도가 빠르다.

두개 인스텬스 값이 같은지 비교할때 자바도 해시코드라는 메서드가 있음.
오브젝트의 해시코드는 인스턴스 값과 상관없이 변수가 같으면 같은 해쉬코드 리턴
오버라이딩하면 인스턴스 값이 같으면 같은 해쉬코드 리턴하도록 할 수 있음..


=================================================

com.eomcs.oop.ex07.a
com.eomcs.oop.ex07.b
com.eomcs.oop.ex06.e
com.eomcs.oop.ex08.a

두 클래스에서 필드나 메서드에서 공통점이 발견되면
공통점을 추출해서 적절한 이름으로 클래스를 추출. 
서브클래스에서는 뽑아낸거 지우고 상속을 받는다.
=>generalization

===============================================
com.eomcs.basic.ex05 Exam04_11.java

비트연산자

======================================
com.eomcs.oop.ex08.d

==========================

com.eomcs.corelib.ex01 Exam0110.java
