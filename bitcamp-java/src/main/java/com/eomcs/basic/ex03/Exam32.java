package com.eomcs.basic.ex03;

//# 부동소수점 리터럴 - 메모리 크기에 따른 표기법

  public class Exam32 {
    public static void main(String[] args) {
      
      // 부동소수점(점이 둥둥 떠다닌다): 4바이트, 8바이트(기본, double)

      //## 8바이트 크기의 부동소수점
      //- 숫자 맨 뒤에 d 또는 D를 붙인다.
      //- 생략해도 된다.
      System.out.println(3.141592653589793); // 
      System.out.println(3.141592653589793D); // 8바이트 부동소수점, 3.141592653589793전부 출력됨
      System.out.println(3.141592653589793d); // 8바이트 부동소수점

      //## 4바이트 크기의 부동소수점
      //- 숫자 맨 뒤에 f 또는 F를 붙인다.
      System.out.println(3.141592653589793f); // 4바이트 부동소수점, 3.1415927만 출력됨
      System.out.println(3.141592653589793F); // 4바이트 부동소수점

      //- 부동소수점의 경우, 큰 값을 작은 메모리에 넣더라도 컴파일 오류가 발생하지 않는다.
      //  그냥 값이 짤려서 들어갈 뿐이다.
      //  개발자가 잘못된 값을 넣었다는 것을 인지하지 못한다.
      //  정수는 작은그릇에 큰 값 넣으면 컴파일시 에러나는데 부동소수점 실수는 컴파일시 에러 안나고 다른 출력값이 나옴.
      
      //## 정리
      //4바이트 부동소수점
      //  3.14F
      //  3.14f (주로 사용)
      //  31.4e-1f
      //  31.4e-1F
      //  
      //8바이트 부동소수점
      //  3.14
      //  31.4e-1
      //
      //e2, E2 = 10^2 /10의 몇승 /지수
      










    }
  }