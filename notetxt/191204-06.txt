191203

시스템소프트웨어: 운영체제, 드라이더
응용소프트웨어: 메모장. 파일 탐색기. 파워쉘...

* GUI : 파일 탐색기 / Command Line : powershell / 
shell script 쉘 프로그램을 통해서 명령어를 기술할 때 사용하는언어 (ms는 파워쉘1개, 리눅스는 여러개 gsh 많이 씀)

시스템 엔지니어는 쉘 스크립트 다룰줄 알아야함. 

*
전기를 끊어주는것 : clock 초당 전기를 몇회 끊느냐 Hz GHz
6HZ : 초당 6신호 보낼 수 있음
Hz가 높을수록 전기 많이 먹고 열이 발생
요즘 추세 - 큰놈 대신 작은 4놈. Hz를 높이기 보다 멀티코어로.

*
+------------------------------OS--------------------------------------------------------------------------------+
명령어 -> RAM에저장 (loding) -> 로딩한걸 CPU로 보내서 CPU가 처리 -> 실행결과 RAM에 저장

CPU에 따라 인식할 수 있는 명령어가 다르다.
CPU마다 어셈블리어도 다르고 컴파일러도 다름
같은 intel CPU라면 기계어는 같으나 윈도우, 리눅스 등 운영체제가 원하는 form형식대로 해야함.
운영체제가 원하는 형식으로 기계어를 배치.

CPU명령어 = CPU instruction

어셈블리어와 기계어는 다르다. 기계어는 1010101010 이런거고 어셈블리어는 로우레벨랭귀지

low level language: 기계어에 가까운 언어 (assembly언어)
high level language : 인간의 언어에 가까운 언어 (c, c++...)

compiler=번역기


## 프로그래밍 개론

#### 컴퓨터와 소프트웨어

- [ ] 컴퓨터와 소프트웨어의 관계를 이해한다.
하드웨어를 제어하는걸 소프트웨어
- [ ] 시스템 소프트웨어와 응용 소프트웨어를 구분할 수 있다.

하드웨어를 총괄제어하는 OS + 부가장비 제어하는 driver : 시스템소프트웨어
그림판, 웹브라우저, 플레이어 : application (software)

=======================================
191204
<공지>
-아침마다 bitcamp-20191202, ohoracs-java 갱신. (집에서 작업한 것이 있다면 bitcamp-study도 갱신)
-<생각의 속도, 빌게이츠> <스티브잡스> <Jony Ive> : 3개 교양서
-<모던 웹을 위한 HTML5+CSS3 바이블> <모던 웹을 위한 JavaScript + jQuery 입문> 윤인정 저.
-<구체수학>, <the Art of Computer Programming>
-<리펙토링. 마틴파울러> : 객체지향답게 소스를 계속 고치는 것.

<수업>

#### 프로그램의 구동 원리
[ ] 컴퓨터에서 프로그램이 실행되는 원리를 이해한다.
?
[ ] CPU(ARM CPU 기준) 인스트럭션이 무엇인지 이해한다. `http://vision.gel.ulaval.ca/~jflalonde/cours/1001/h17/docs/arm-instructionset.pdf`
cpu에게 전기적신호를 보내기 위해서 내리는 명령어가 씨피유인스트럭션=cpu명령=기계어
cpu에서 어떤 핀에 전기적 신호가 나오는지 안나오는지 기술해놓음(2진수로표기) 씨피유인스트럭션=cpu명령=기계어
64bit는 한번에 전기신호 64개 작동.
+는 어떤 핀에 어떤 전기신호를 보낼지... 
cpu에게 전기를 흐르는 규칙 = 기계어 = 시피유 인스트럭션 = 시피유 명령 2진수로 작성

[ ] CPU 인스트럭션과 실행 파일, OS의 관계를 이해한다.
[ ]같은 CPU에 맞춰 작성된 실행 파일이더라도 OS가 다르면 실행되지 않는 이유를 설명할 수 있다.
 
cpu명령어은 운영체제마다 다른 포맷으로 배치한다. 명령어 자체는 같으나. 이력서 포맷이 다른것처럼.

같은 cpu라도 운영체제가 다르면 기계어를 구성하는 포맷이 다르기 때문에 그에 맞게 기계어를 작성해야 한다.
기계어를 구성하는 방법이 OS마다 다르다. (이력서 포멧)


#### 중간 언어와 가상 머신

[ ] 중간 언어와 가상 머신이 등장한 이유와 이점을 설명할 수 있다.
[ ] VM과 인터프리터, 런타임, 플레이어, 엔진의 역할을 이해한다.
 
중간언어를 만들면 cpu 운영체제 상관없이 가상 기계어로 작성함.
그래서 cpu나 운영체제 상관없이 한 번만 컴파일링 하면됨 

.java ---번역기(자바컴파일러)---> 중간언어=IR=bytecode(자바) ---> VM(=바이트코드를 읽는 플레이어,뷰어임/엔진/인터프리터) ---> os

자바컴파일러로 .java를 중간언어로 컴파일/ vm을 실행시켜서 bytecode를 읽어서 처리 / 실행방법 $ java(vm) Hello(bytecode)
단점 속도가 느리다.


[ ] JIT(Just-in-time)과 AOT(ahead-of-time)이 무엇이고 등장한 이유를 이해한다.

실행하는 시점에 내가 실행하려는 명령어를 진짜 기계어로 바꾼다 jit 실행하는데 딜레이
실행하기 앞서서 중간언어를 진짜 기계어로 바꾼다 aot 설치할때 딜레이 실행시는 빠름


vm 에서 실행하는 시점에 '일부'를 진짜 기계어로 번역해서 임시공간에 보관 그걸 바로 실행,
또 실행하는 시점에 일부를 진짜 기계어로 번역해서 임시공간에 보관, 그걸 바로 실행.
거의 진짜 기계어를 실행하는 속도를 내기 위해 중간에 진짜 기계어로 번역해서 실행하는 전략을 씀.
-> JIT compiler (just in time) : 안드로이드도 이 방식

실행하는 시점에 컴파일 하다 보니까 단점: 중간에 딜레이가 걸림. 매끄럽지않아.
-> Ahead of Time 실행에 앞서서 미리 컴파일하자 : AOT compiler 도입
app 설치하는 시점에 기계어로 컴파일하는 것.
단점: 설치시에 시간이 걸림

1) 중간언어를 매번 실행할때 마다 읽어서 실행 읽어서 실행
2) JIP --설치--> ...실행...(기계어)...->...(기계어)...-> 실행하는 시점에 많이 쓰는 거는 컴파일 후 실행
3) AOT.......설치..........> ----실행----> 설치할때 미리 기계어로 컴파일 실행시는 속도 빠름
4) JIP+AOT 결합방식 사용 : 일부만 기계어로 바꾸고 한가할 때 기계어로 바꿈

*실행속도를 높이고자 등장한 개념들이 JIP, AOT, JIP+AOT

cf. c언어는 대부분 c컴파일러로 각각 cpu에 맞는 기계어로 바꿈.->리눅스 윈도우.. 각각에 맞춰서 실행
unix라는 운영체제를 만들기 위해 개발한 언어가 c
cpu마다 기계어도 다르지만 어셈블리어도 조금씩 다름

윈도우: 소스가 아닌 실행파일을 주고받음, 이미 컴파일된 파일. (컴파일러툴)비쥬얼스튜디오 다운받아서 써야함.
유닉스: 소스를 주고받음, 따라서 기본적으로 컴파일러가 내재되어 있다.

자바도 jip방식 도입중.

*중간언어를 거치는 것과 안 거치는 것의 차이 :
중간언어로 번역 시(컴파일 시) 문법오류 검사. (컴파일 오류 뜸) 
중간언어는 기계어와 흡사하기 때문에 처리 빨라

cf. .js는 바로 소스를 읽어 V8 Engine -> OS : 
실행 시 문법검사. 시간지체. 실행하기 전까지 문법적 오류 있는지 알 수 없음. 기계어와 거리가 멀다. 해석하는데 시간이 걸린다.


*HelloWorld.class 직접 작성하기 (16진수로 작성, sublime: 직접 16진수 입력가능)
1. 기계어가뭔지 가상기계어로 간접경험
2. 사람이 할게 못된다는거 경험
3. java라는 언어가 쉽네 느껴지게 됨


#### 자바 바이트코드와 자바 가상 머신

[ ] 바이트코드와 클래스 파일(.class)의 관계를 이해한다.

바이트코드가 들어있는파일 = 클래스 파일
클래스파일: 가상기계어=중간언어=IR(Intermediate Representation) -> 이 중간언어를 플레이 시키는 플레이어 인터프리터 엔진이 JVM

#### 프로그래밍 언어와 컴파일

[ ] 컴파일 방식 프로그래밍이 등장한 이유를 이해한다.

인간에게 가까운 자바라는 언어로 작성하고 컴파일하면 가상언어로 변환된다.
기계어를 직접작성하지 말라고.
우리가 직접 기계어로 짜는 건 말도 안되니까 컴파일 방식이 등장
자바.java에 자바 언어로 짜고 컴파일(javac.exe)하면 .class가 생기고 vm(java.exe)이 실행하는데 진짜 기계어로 바꾸는 JIP AOT등으로 ..
씨언어 .c는 컴파일, 링킹하면 ~.exe가 바로 생성됨. 속도 빠름. / 자바는 링킹이 없음

[ ] 프로그래밍 언어와 컴파일, CPU 인스트럭션의 관계를 이해한다.

프로그래밍언어를 컴파일하면 cpu인스트럭션이된당. 기계어로 바꾸는게 컴파일

[ ] 링커(C 프로그래밍 언어 기준)를 이용하여 목적 코드가 들어 있는 파일을 하나로 묶어 실행 파일을 만드는 과정을 이해한다. `$ ld -o 실행파일 목적파일 목적파일 … -lSystem -macosx_version_min 10.13`
??

[ ] C 프로그래밍 언어 기준, "소스 파일, 목적파일, 실행 파일"과 "컴파일러, 링커"의 관계를 이해한다. 
??


#### 컴파일러와 인터프리터

[ ] 인터프리트 방식 프로그래밍과 실행 과정을 이해한다.
[ ] Node.js 자바스크립트 인터프리터를 준비할 수 있다.
[ ] 인터프리터(Node.js 기준)를 사용하여 소스 파일을 직접 실행하는 과정을 이해한다.

hello.js ----인터프리팅----> node.exe --------------------------> OS
(javascript)                     =자바스크립트엔진
              	          =인터프리터
		           - 한줄씩읽어서 실행한다.
                  	           - 문법오류검사 수행 -> 실행할때마다 수행. 
                                   실행하기 전까지는 오류여부가 드러나지 않는다
                  	           - 실행
                                   - 자바보다 속도 느림

*용어: 설치x => 배포, 배치 (deploy)     
*node js 설치 및 실행 : scoop install node / node -v / node hello.js


[ ] 컴파일 방식과 인터프리트 방식의 구동 원리를 이해한다.

{hello.js} ----인터프리팅----> {node.exe} -----------------> {OS}

{.java} 소스파일 ----javac.exe/컴파일러----> {.class} bitecode=P-code=IR ----->{JVM} java.exe/인터프리터----->

{.c} ---> {.obj} ---> {.exe}

소스를 바로 읽는 인터프리팅방식: 파이썬 .php . pl


[ ] 컴파일 방식과 인터프리트 방식의 장단점을 비교할 수 있다.

속도는 컴파일이 빠름. 왜? 기계어로 바꾸기 때문에. 
자바는 컴파일해서 .class인 중간언어로 바꿨기 때문에 JVM이 필요하다.
.c는 컴파일하면 바로 실행파일 생김.
.java-컴파일러->.class-인터프리터->OS
씨샵도 중간언어 방식
씨같은애들은 운영체제에 따라 컴파일 따로 해야함.

컴파일 방식(속도 빠르다. 운영체제가 바로 읽어서 실행)과 인터프리트(인터프리터가 필요하다:노드 소스를 바로읽는다 운영체제별로 컴파일안해도되고 노드만 설치되어 있으면 된당)

#### 자바 프로그래밍 절차
[ ] 자바의 프로그래밍 방식과 실행 원리를 이해한다.
[ ] 자바 코드와 바이트코드, 소스 파일과 클래스 파일의 관계를 이해한다.
[ ] 자바 컴파일러와 JVM의 역할을 이해한다.
[ ] CLI 환경에서 컴파일을 수행할 수 있다. `/Hello.java`, `$ javac Hello.java`
[ ] CLI 환경에서 자바 클래스 파일을 실행할 수 있다. `/Hello.java`, `$ java Hello`
CLI = command line interface ex)터미널, 파워셀


-------------------------------------------

#### 소스 파일과 컴파일 결과 파일 분리

[ ] Maven 표준 디렉토리 구조를 만들 수 있다. Maven 표준 디렉토리 구조에 맞춰 폴더를 생성한다.
[ ] 각 디렉토리의 용도를 이해한다.

실무에서는 여러 소스 파일로 분리함.
납품시에는 클래스만 보냄. 납품받는 사람이 자기 운영체제에 맞는 JVM설치해서 인터프리팅하는 것,
소스파일 폴더 =src / 컴파일 완료된 바이트코드가 들어있는 클래스파일 폴더=bin 따로함

유닛테스트: 각각의 기능별로 테스트
프로그램을 테스트하는 프로그램도 같이 만들어야하는 것. ->소스의 종류가 2개
유닛테스트 도구: JUnit많이씀 -> TestNG ...

src에는 car.java도 있고 cartest.java도 있다.
같은 폴더에 관리하면 힘듬
그래서 나눔

src/
 -main/car.java
            요즘은 하나의 프로그램이 언어별로 나옴..
             label_co_kr.properties
             label_en_US.properties
             이런 파일이 같이 들어감

 -test/cartest.java

그래서 또 나눔

***이 구조는 Maven 에서 표준으로 사용하는 빌드
src/
 -main/
     -java/ 자바소스파일 ex) .java
     -resources/ 실행중에 사용할 기타파일 ex) .properties .txt .xml 등
 //   -kotlin/      지금은 모르는 다른애들
 //   -g.../
 //   -webapp/

 -test/
      -java/ 단위 테스트를 실행하는 자바소스파일 ex) .java
      -resources/ 단위테스트 동안 사용할 기타파일 


*1 Repo. = 1 Project인 경우
bitcamp study
  -src
  -bin

*1 Repo. = 여러 Project인 경우
bitcamp study/
  -bitcamp-docs/
  -bitcamp-java/
	-src/
		-main
			-java
			-resources
		-test
			-java
			-resources
	-bin/

  -bitcamp-java-project/
	-src/
	-bin/


-----------------------

** git에서 빈 폴더는 업로드 되지 않음
** 비주얼스튜디오 익스플로러에서 디렉토리가 초록색이 되면 다른데 백업 안되었다는 것
** git clone (http~깃허브주소) (다른폴더이름) 하면 복제시 내컴(로컬)에서 폴더이름만 달라짐
** github java popular style : 스페이스바가 60퍼.... ㅠㅠ block indentation +2spaces
** ohoracs-java>src>main>java>com>하위폴더들 참고
------------------------

[ ] 프로젝트 디렉토리에서 소스 디렉토리에 있는 자바 소스 파일을 컴파일 할 수 있다. `src/main/java/Hello2.java`, `$ javac src/main/java/Hello2.java`
[ ] 컴파일 할 때 컴파일 결과로 생성된 클래스 파일을 별도 디렉토리에 분리할 수 있다. `src/main/java/Hello2.java`, `$ javac -d bin/main src/main/java/Hello2.java`
[ ] 다른 디렉토리에 있는 클래스 파일을 실행할 수 있다. `src/main/java/Hello2.java`, `$ java -classpath bin/main Hello2`

** 명령어로 컴파일할 때 javac src/main/java/Hello2.java 처럼 상위 폴더(프로젝트 폴더)에서 하위 디렉토리 써서 컴파일 가능
** 명령어로 실행할 때 java -classpath(cp) src/main/java Hello2
** bitcamp-study는 저장소 폴더, 그 밑에 bitcamp-java는 프로젝트 폴더.

** 컴파일 할 때 컴파일 결과로 생성된 클래스 파일을 별도 디렉토리에 분리할 수 있다. 
javac -d bin(없으면 자동으로 만듬) src/main/java/Hello2.java
javac -d bin/main(클래스파일생성위치) (소스위치)src/main/java/Hello2.java
** 이제 실행할 때도 java cp bin/main Hello2 로 바꿔야 하는 것.

-------------------------------------------------------

#### 패키지와 소스 파일
[ ] 패키지의 용도를 이해하고 패키지를 생성할 수 있다. `com.ohoracs.basic`, `src/main/java/com/ohoracs/basic 디렉토리 생성`
[ ] 소스 파일에 작성한 코드가 패키지에 소속되게 할 수 있다. `src/main/java/com/ohoracs/basic/Hello3.java`
[ ] 패키지에 소속된 소스 파일의 적절한 디렉토리 경로와 왜 그 위치에 놓아야 하는지 이해한다.
[ ] 컴파일 한 후 생성된 클래스 파일의 디렉토리 경로와 그 위치에 있어야 하는 이유를 안다.
[ ] 패키지에 소속된 클래스 파일을 실행할 수 있다. `src/main/java/com/ohoracs/basic/Hello3.java`, `$ java -cp bin/main com.ohoracs.basic.Hello3`
[ ] 패키지를 적용하지 않은 채로 그 소스 파일을 그냥 패키지 폴더에 둔다면 컴파일 할 때 어떤 문제가 발생하는지 안다. `src/main/java/com/ohoracs/basic/Hello4.java`

*패키지:
클래스도 조직적으로 관리하자. 디렉토리별로 관리.
소스파일 상단에 패키지 명령어 꼭 써야한다.
**실제로 패키지는 소스파일을 분류하는게 아니라 클래스를 분류하고 클래스 단위로 관리함.


특별한 의미를 가지는 디렉토리
우리회사와 다른회사의 폴더가 절대 충돌하지 않는 방법, 나와 타인의 소스파일이 절대 겹치지 않게 관리하는 방법
소스파일 구분하고 관리하기 쉽게 하기 위한 목적이 패키지
= 패키지 이름을 도메인이름으로 만든다
** src/main/java 까지가 소스폴더, 그 밑에 com>~이 특별한 패키지 폴더, 보통 상위폴더com > 회사명 > 제품명>으로함

우리수업은 
com
  -ohoracs 
    -basic

여기에 Hello3.java만들기!

`com.ohoracs.basic' 의미는 src/main/java/(소스폴더)에 com/ohoracs/basic 라는 패키지 폴더를 만든다는 것.(x)

javac -d bin/main(클래스파일생성위치) (소스위치)src/main/java/com/ohoracs/basic/Hello3.java


폴더 밑에 파일 둔다고 패키지? 아님! 코드로 꼭 들어가야함.

PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -d bin/main src/main/java/com/ohoracs/basic/Hello3.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -d bin/main src/main/java/com/ohoracs/basic/Hello3.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -d bin/main src/main/java/com/ohoracs/ok/Hello3.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> java -cp bin/main Hello3
ok/Hello3!
최근 만든 클래스파일이 실행되네?

소스파일이 특정 폴더에 소속되게 하려면 코드로 명시해야함! 
***
package com.ohoracs.basic;  
// com이하 폴더는 특수폴더=패키지폴더임. 자바가 보기에는 전혀다른 폴더. 소스파일이 소속되는 폴더 = 패키지
public class Hello3 {
  public static void main(String[] args) {
    System.out.println("basic/Hello3!");
  }
}

패키지의 소속된 클래스를 컴파일하게 되면 자동으로 해당되는 폴더(클래스파일 생성위치) 
밑에 패키지 폴더가 자동생성 되고 클래스 생성됨
javac -d bin/main src/main/java/com/ohoracs/basic/Hello3.java


소스파일에 내 주소 명시(패키지문장)
컴파일시 내 주소 (패키지경로) 말해줘야함.

패키지 문장 넣고 컴파일 할때 패키지가 폴더가 이미 있으면 또 생성되진 않음.

실행시, 패키지바로위 일반폴더 까지만 클래스 패스 지정, + 그다음에 패키지경로 점으로 표기
>>java -cp bin/main com.ohoracs.basic.Hello3
cf. src/main/com/ohoracs/basic/Hello3 (실행안됨)

**왜 src밑에는 main 밑에 java폴더 kotlin폴더 등등만드는데
bin폴더에는 main 밑에 랭귀지폴더 안 만드나?

자바호환언어는 컴파일하면 같은 바이트코드의 클래스 파일이 만들어진다.
구분하는건 무의미
class만 보고는 자바에서 컴파일한건지 코틀린에서 컴파일한건지 알 수 없음.
소스에서는 구분되나 클래스에서는 구분안됨
그래서 bin은 > main 바로 밑에 패키지 폴더가 만들어짐.

학습의 첫번째 단계 이해를 포기하고 받아들인다. 암기.

패키지를 적용하지 않은 채로 그 소스 파일을 그냥 패키지 폴더에 둔다면 컴파일 할 때 어떤 문제가 발생하는지 안다.
javac -d bin/main src/main/java/com/ohoracs/basic/Hello4.java -> 그냥 bin/main 하위에 클래스가 생김.(Hello4)

======================================================================================================================

191205
*bitcamp-study=저장소폴더 / 그 하위는 프로젝트 폴더

*자바는 씨보다 속도를 높이기 위해 만든언어가 아니라 write once run anywhere목적으로 탄생

*
자바스크립트 파이선: 인터프리터방식, 번역없이 즉시 실행
자바: 컴파일 인터프리터 둘다
씨: 컴파일 

*
윈도우용 c 컴파일러 설치
visual studio / window c compiler 검색 / 
https://sourceforge.net/projects/mingw/ 다운로드 /
exe로 블로그 참고 후 설치 / https://webnautes.tistory.com/1196

*
lib폴더: 메인프로그램이 사용할 명령어들이 들어가 있음. 확장자 .o, .a 기계어 파일
환경변수 path에 C:\MinGW\bin에 추가
VS code로 hello.c생성 
코드)
#include <stdio.h>

int main() {
  printf("Hello!\n");
}


**
VScode 에서 3개 비교: 갈수록 복잡. 더 큰 시스템을 개발할때는 더 큰 구조가 필요.
씨 씨쁠쁠 자바 자바스크립트: 실제 나온 순서

hello.js 인터프리팅 컴파일 안함. 자바스크립트엔진. $ node hello.js 
-> 바로 명령어 출력. 
실행할 때 자바스크립트 엔진의 도움 필요. 
소스코드를 그대로 읽어서 실행
전체의 문법의 오류 알 수 없음. 오류냐 실행 오류냐 실행 오류냐 실행 
인터프린터 방식의 단점 오류가 있는 부분의 문법 실행 전까지 문법 오류가 있는지 알 수 없다!


hello.c 
컴파일해야함 $ gcc hello.c(a.exe만들어짐) / gcc -o hello.exe hello.c -
> 컴파일하면 진짜 기계어인데 인텔cpu인스트럭션 cpu기계어 cpu명령어를 
윈도우 운영체게가 원하는 방식으로 기계어가 구성된 파일 
hello.exe -> 실행 $ ./hello : 속도 빨라.
컴파일 방식은 컴파일할때 문법오류 검사함.
gcc -o hello.exe hello.c 할때 소스코드에 문법오류 있으면 컴파일 안됨. 
(오류문: function 'prentf' [-Wimplicit-function-declaration])
컴파일을 통과하면 실행가능 $ ./hello


Hello.java : ./Hello 로 실행 안됨. JVM로 도움받아 가상기계어를 실행해야함. java Hello
컴파일방식
 cannot find symbol
            System.out.prentln("negative!");


***정리:

1.인터프리터방식, 인터프리팅방식 Interpreter방식
hello.js 작성 --------------------> node.exe ---> 실행
	                           -실행할 부분만 문법검사
			     -실행
                                       -장점: 코드 변경이 쉽다.
                                       ->문제점: 
                                       실행할 때 마다 문법검사 = 실행속도가 느리다.
                                       실행할 부분만 문법검사 = 배포할 때 문법오류가 존재할 수 있다.
                                       소스를 읽어 실행 = 실행 속도가 느리다.

2. 컴파일방식 compiler방식

hello.c --------컴파일러-------->hello.o파일생성됨
                                     printf()   ------------------------->
                                         ↓사용     +     링커 linker   hello.exe
			stdio.lib 안에 ----------------------->
     printf(){}에 대해서 작성된 코드가 있음


기계어 - 실행속도 빠르다
기계어 직접실행 - Engine, VM이 필요없다
문제점
-플랫폼(CPU, OS)에 종속된다. (기계어로 바꿀때 특정 하드웨어 오에스에 따라 다르게 바꿈. 윈도우 용으로 한번 바꾸면 리눅스에서 실행 불가. 리눅스에서 실행하려면 컴파일 다시해야함)
-플랫폼이 다르면 다시 컴파일 해야한다.


3. Java 방식 (Interpreter + Compiler)

두가지가 하이브리드
                                                 바이트코드 
                                                 인터프리터
Hello.java---컴파일러------>Hello.class--->JVM------>실행
               (문법검사o)                     (java.exe)

-컴파일 할 때 문법검사 완료 후 실행한다. 인터프리터보다 속도 빠름.
-문제점
진짜 기계어가 아니기 때문에 실행할 때 마다 JVM의 도움을 받아야 한다. 
=실행속도는 c방식 보다 느리다.
->보완하기 위해 생긴것이 JIT/AOT컴파일러 방식이다.



*운영체제마다 같은 cpu라도 기계어를 배치하는 방식이 다르다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------


#### Gradle 빌드 도구

[ ] Gradle 빌드 도구를 이용하여 작업 폴더를 자바 프로젝트 폴더로 구성할 수 있다. `/프로젝트폴더`, `$ gradle init`
[ ] Gradle로 생성된 src 디렉토리의 구조를 이해하고 설명할 수 있다. `/src`
[ ] src 디렉토리 외에 다른 디렉토리나 파일의 용도를 이해한다. gradle폴더
**참고 : bitcamp-study > bitcamp-docs > devtool > Gradle.md

프로그램을 짠다는것:

     [프로젝트관리]			 (컴파일)
요구사항식별->분석->설계 	        |   명령어 작성  	실행할 수 있도록 번역,   단위테스트  }  -> 배치파일 생성	-> 서버에 배치 
     	아키텍트	      	        | 	.java         	-> .class		        -> JUnit 	}   .jar .war .zip ---업로드-----> [서버]
Word			        |   .xml 						}
UML도구			        |   .html 						}  -> API문서 생성
나와 상관없음  		        |   .css 						}    *.html
			        |   .js						}
			        |	하나의 언어로만 작성x
                                          | 
 	                               |-------------Build----------------------------------------------------------------------------------------------------------|


*명령어 작성 전 개발준비사항
-프로젝트 폴더 준비...하나씩 만들기 귀찮아
-이클립스는 프로젝트 폴더 알려줘야함. 일반폴더 인식못함
-비주얼스튜디오코드는 전부 일반폴더로 인지하고 다 보여줌
-개발자 고급 툴일 수록 툴에 적합한 설정을 해줘야 해당폴더가 프로젝트 폴더임을 인식

*개발준비사항부터 서버배치까지 빌드 전반을 도와주는 도구 : 빌드 도구
- ex. Ant ---- +의존객체관리기능추가 ---------->  Maven --------------------- +복잡한제어  -----------------------------------------------> Gradle(안드로이드는 100프로씀 웹은 80프로)
      build.xml  의존라이브러리관리기능추가       pom.xml                     => XML대신                                                    build.gradle (groovy라는 스크립트가 들어있는 파일)
                                                           (프로젝트오브젝트모델)        groovy언어사용하여 설정스크립트 작성


*이력서: 내정보를 적어놓은 설정파일. 포멧이존재.
*<name>신나라</name> : metadata, tag=element(전문용어) => xml형식 : 정교한 조건 설정 불가
*복잡한 빌드를 정교하게 제어해야하는데 xml로는 안됨
*어떤 프로젝트폴더에는 build.xml pom.xml build.gradle 다 있는 경우도 있음. (골라서 써라)


***********그레이들 용도 중 "1.프로젝트폴더준비" 해봅시다.++++++++++++++++++++++++++++++++++++====

-scoop install gradle로 파워셀에서 설치
-gradle --version로 확인
-C:\Users\user로 올라가서 연습
$mkdir test
$cd test
$gradle init
$2: application
$3: Java

화면>
Select build script DSL:
  1: Groovy
  2: Kotlin

뜻>
DSL=domain specific language 특정영역에서 사용할 랭귀지
JSP안에 사용되는 언어가 자바
그레이들 빌드 도구가 설정파일(스크립트) 작성할 언어를 선택하라!는말
build.gradle안에 사용될 언어를 골라라 > groovy

$1: JUnit 4

화면>
Select test framework:
  1: JUnit 4
  2: TestNG
  3: Spock
  4: JUnit Jupiter
뜻>
테스트프레임웍을 선택하라. 단위테스트하는 도구를 선택하라.

$1: JUnit 4 선택

화면>
Project name (default: test) 특별한 경우 아니면 디렉토리 이름 그냥 씀 엔터!

화면>
Source package (default: test):     
패키지명 설정해라
com.ohoracs.ok (회사명>제품명 서비스명,,)

*탐색기로 만들어진거 확인!

*.gradle / gradle 폴더 차이는? 
받는 쪽에서 그레이들이 설치 안되어 있어도 되라고 gradle 폴더 있는 것. 설치 필요 없음.

*서버 리눅스는 커맨드라인으로만 작업

***PS C:\Users\user\test 위치 에서 $ gradle build 실행!
>build라는 폴더 생김 > 그 안에 libs 폴더 > test.jar 있음! > 알집으로 보면 META-INF:부가정보 / com-ohoracs-ok-App.class 가 있음!
>distributions폴더 > test.zip 있음.

실무에서는 몇백명이 만든 클래스는 몇천몇만개. 그걸 이클립스로 하는건 말이 안됨. 

*압축안풀어도됨(1번) 파워셀에서 바로 실행하는법 두 개 :
1) C:\Users\user\test\build\libs> dir : test.jar 있음 > java -cp ./(현재폴더다 생략가능)test.jar com.ohoracs.ok.App

2) C:\Users\user\test\build\distributions\test.zip\test\bin : test(리눅스유닉스) / test.bat(윈도우) 파일 두개 있음
친구한테 디스트리뷰션에 test.zip 여기에 압축풀기로 압축풀어~
C:\Users\user\test\build\distributions\test\bin> dir
$ ./test 또는 ./test.bat로 실행!! (파워셀)

**참고 : bitcamp-study > bitcamp-docs > devtool > Gradle.md

## gradle tasks --all
gradle로 사용할 수 있는 모든 작업을 출력한다.
gradle 설정 파일(build.grale)이 있는 폴더에서 실행해야 한다. (test폴더에서)


**그레이들은 빌드도구이다. 사용하는 이유!
1.프로젝트 폴더 자동생성해준다.
2.최종사용자가 사용할 수 있게 zip파일로 만들어준다

*run 명령어 제공
폴더: C:\Users\user\test>  위치에서
run - Runs this project as a JVM application
$ gradle run하면
화면에
> Task :run
Hello world.va > Resolve dependencies of :compileClasspath
보임.

** tree /a 하면 폴더트리보임 /  파일까지 보게하려면 명령어 뭐?????


===============================================================
## 자바 기초 문법 - com.ohoracs.basic

#### 클래스 블록과 컴파일, 실행
소스파일 내의 클래스 대로 클래스 파일이 생성됨.
한 소스파일 내에 클래스 여러개 있다면 컴파일 시 여러개 클래스 파일 생성됨.

- [ ] 소스 파일(.java)과 클래스 블록(class 클래스명 {…}), 클래스 파일(.class) 관계를 이해한다. `ex01/Exam11.java`
- [ ] 한 소스 파일에 여러 개의 클래스 블록이 있을 때 컴파일하면 어떻게 되는지 안다. `ex01/Exam12.java`
- [ ] 클래스의 사용 범위(공개/비공개)에 따라 소스 파일과 클래스 블록의 이름이 어떤 관계가 있는지 안다. `ex01/Exam21.java, Exam22.java, Exam23.java`
공개 클래스는 소스파일과 클래스 블록의 이름이 일치해야 한다.
- [ ] 컴파일 할 때 소스 파일의 인코딩을 지정할 수 있다. `ex01/Exam3.java`
vs code: utf-8로 저장. 파워셀-엠에스는 엠에스 949로 가정하고 컴파일함. 따라서 -encoding utf-8 옵션넣어야함.
- [ ] JVM이 클래스를 실행하는 과정을 이해하고 설명할 수 있다.
***클래스를 로딩한 후 클래스의 유효성을 검증하고 클래스의 상수를 미리 다 로딩한다음에 메인 메소드를 찾는다.

- [ ] main() 메서드의 용도를 알고 있으며 작성할 수 있다. `ex01/Exam4.java`

1.
Exam11.java 생성 (비트캠프자바>src>>>>basic>ex01폴더생성)

소스파일과 패키지의 관계
어떤 소스파일이 패키지의 소속되어 있는 경우 소스파일의 위치를 그 패키지 밑에 두라. 그리고 소스파일에 package를 선언해라
package com.ohoracs.basic.ex01;

// 클래스 블록과 컴파일

클래스블록: 명령어가 들어있는 블록

자바스크립트는 그냥 명령어를 쓰는기술
씨는 기능단위로 명령어를 묶어서 기술 / 리눅스는 씨로되어 있음 / 씨는 기능function안에 작성
자바는 더 큰 단위인것. 
내가 만든 기능function이름이 타 개발자이름과 같은 문제
function을 다시 그룹으로 묶자



JS
~~
~~
~~

↓명령어를 분류

C
function
역할에 따라 명령어를 분류

f1() {
~~
~~
}

f2() {
~~
~~
}

f3() {
~~
~~
}


↓ f으로 분류한 명령어모음을 또 역할에 따라 분류classification / f을 역할에 따라 분류한게 class

Java 
OOP=객체지향프로그램

class Car {
f1(){.명령어들....}
f2(){...}
}

class CarCenter {
f3(){...}
f4(){...}
}


**
자바는 씨보다 속도를 높이기 위해 만든언어가 아니라 write once run anywhere 목적으로 탄생
하드웨어를 제어할 목적이면 c를 써야함. 리눅스도 c로 만듬. 운영체제는 c로 커버가능.

<객체지향 프로그램 등장이유> 
대량의 소스코드 효율적으로 유지보수관리하기 위해 등장한 언어. java c++
웹은 java가 적절.

c#도 VM기반.

<최소형식>
**모든 명령어는 단 한줄이라도 반드시 함수 안에 기록. 
**그 함수는 무조건 1개 클래스 안에 포함되어 있어야함.
즉, class안에 메소드(function)안에 명령어가 있어야함.


**클래스 단위로 클래스파일 생성됨? 네
# 클래스 블록과 컴파일 I
//- 자바 컴파일러는 클래스 블록 단위로 컴파일을 수행한다.
//- 클래스 블록 단위로 클래스 파일(.class 파일)을 생성한다.
//- 클래스 파일의 이름은 클래스 블록의 이름과 같다.

//실습: Exam11.java 생성 (비트캠프자바>src>>>>basic>ex01폴더생성)
//결과: 실행안됨 **메인함수가 없으면 클래스파일 실행이 안됨
 java -cp bin/main com.ohoracs.basic.ex01.Exam11
오류: com.ohoracs.basic.ex01.Exam11 클래스에서 기본 메소드를 찾을 수 없습니다. 다음 형식으로 기본 메소 드를 정의하십시오.
   public static void main(String[] args)


**인코딩
C:\Users\user\git\bitcamp-study\bitcamp-java> 
javac -encoding UTF-8 -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam11.java
        (옵션)             (명령어)       (값)

*한글이깨질때넣는옵션../맥 리눅스는 -encoding UTF-8 옵션 안줘도 됨. 기본적으로 UTF-8임.
윈도우는 디폴트가 ms949...
텍스트를 저장할때도 규칙이 있다!

---------

컴파일하면 클래스블록단위로 클래스파일이 생긴다!!! c와의 차이점
소스파일로 클래스파일이 만들어지는게 아니라 클래스가 여러 개면 클래스파일 여러개 생김
\Exam12.java
package com.ohoracs.basic.ex01;

class A {}
class B {}
class C {}

javac -encoding UTF-8 -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam12.java

Exam12.java
class A {}                     A.class
class B {}  ----compile---> B.class
class C {}                     C.class


cf. C언어는
a.c -> a.o         }
         +          }  test.exe
b.c -> b.o         }
         +stdiolib  }

=----------------------------------------------------
\Exam22.java
소스파일명과 클래스명이 달라도 된다. 컴파일이된다! 클래스 단위로 클래스파일이 만들어짐.

***
비공개 class클래스(내가 작성한 명령어가 해당 방 안에서만 사용 가능)의 경우 소스파일명과 클래스명이 달라도 된다.
public공개 class클래스(내가 작성한 명령어가 다른 개발자, 다른 폴더에서 사용 가능하게)의 경우 소스 파일명이 클래스 이름과 같아야 한다.
cf.중첩, 이너 클래스는 추후에.

*패키지에 바로소속되는 클래스=패키지 멤버 클래스

컴파일시: PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -encoding UTF-8 -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam22.java

src\main\java\com\ohoracs\basic\ex01\Exam22.java:6: error: class Exam22x is public, should be declared in a file named Exam22x.java
public class Exam22x {}
       ^
1 error
에러남.
-------------------


\Exam23.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -encoding UTF-8 -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam23.java

----------
\Exam3.java

**VS code는 기본 encoding이 utf-8이다. 

*2byte로 표현하는 유니코드.
과거 영어는 문자당 1바이트쓰는거 가져오면서 알파벳으로 안되는 문자는 2바이트로 하자 =utf 유니코드 변형포맷

** javac -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam3.java 영어만 있을 때 컴파일됨. ms949와 호환됨.
** javac -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam3.java 소스파일에 한글이 들어가는 순간 컴파일 안됨!! ms949에 이런 글자 없어! 운영체제의 기본 인코딩(ms는 ms949)이라 간주하고 읽음
따라서----->$ java -encoding [utf-8|UTF-8|utf-16...] source_file_path 형식으로 해야함
따라서----->$ javac -encoding utf-8 -d bin/main src/main/java/com/ohoracs/basic/ex01/Exam3.java

->실행해봅시다
$ java -cp bin/main com.ohoracs.basic.ex01.Exam3

-> 오류: com.ohoracs.basic.ex01.Exam3 클래스에서 기본 메소드를 찾을 수 없습니다. 다음 형식으로 기본 메소드를 정의하십시오.
   public static void main(String[] args)
또는 JavaFX 애플리케이션 클래스는 javafx.application.Application을(를) 확장해야 합니다.

=>왜?
JVM머신이 클래스 실행할 때, 메모리에 올린 다음에 메인이라는 펑션 찾음. 근데 없음. 그래서 실행 안됨.
시작함수는 오로지 main
*****main 메소드가 없는 클래스는 실행할 수 없다.

---------

\Exam4 : 실행하려는데 최소 규칙

args: 알규먼트쓰.

package com.ohoracs.basic.ex01;

public class Exam4{
  public static void main(String[] args) {
    
  }
}

------------------------
#### 주석

- [ ] 자바 소스 코드에 주석을 달 수 있다. `ex02/Exam1.java`
- [ ] 주석(`//, /* … */`)의 종류와 작성법을 안다. `ex02/Exam1.java`

\ex02/Exam1.java, Exam2.java
자바에서 주석다는 법 
//싱글라인

/* 
~ 
*/ 
멀티라인 주석의 장점은 명령어 사이에도 사용 가능! 중가중간에

--------------------------
Exam3.java

package com.ohoracs.basic.ex02;

  public class Exam3 {
    public static void main(String[] args) {
      System.out.println("애노테이션");
      
    }
   
    @Override 
    public String toString() {  // 컴파일러에게 기능을 재정의함을 알리는 명령이다.
      return "okok";
    }
  }

$ javac -encoding utf-8 -d bin/main src/main/java/com/ohoracs/basic/ex02/Exam3.java
$ java -cp bin/main com.ohoracs.basic.ex02.Exam3

// 애노테이션(annotation)
// - 컴파일러나 JVM에게 지시하는 명령
// - 실행 중에 추출해서 사용하는 특별한 데이터

//# 주석 - 애노테이션(annotation)
//- 클래스, 변수(필드, 아규먼트, 로컬 변수), 메서드 선언에 붙이는 주석이다.
//- 컴파일러나 JVM에서 사용할 주석이다.
//- 컴파일 한 후에도 클래스 파일(.class)에 주석을 유지할 수 있다.
//- 클래스 파일을 메모리에 로딩할 때 주석도 함께 로딩할 수 있다.
//- 실행 중에 클래스와 함께 로딩된 주석을 추출할 수 있다.
//- '프로퍼티=값' 형태로 값을 설정한다.
//
//## 애노테이션 문법
//- 작성 방법
//  @애노테이션명(프로퍼티명=값,프로퍼티명=값,...)
//  예1) @Override
//  예2) @SuppressWarnings(value="deprecation")
//  예3) @SuppressWarnings(value={"unchecked", "deprecation"})

//## @Override 
  //- 수퍼 클래스에서 상속 받은 멤버를 재정의 한다는 것을 컴파일러에게 알린다.
  //- 컴파일러는 오버라이딩 규칙을 준수하는지 검사한다.
  //- 만약 오버라이딩 규칙을 따르지 않는다면 컴파일 오류를 발생시킬 것이다.
 
//## 실습1 : 컴파일하기
//- $ javac -d bin/main -encoding UTF-8 src/main/java/com/ohoracs/basic/ex02/Exam3.java
//- 오류없이 정상적으로 컴파일 된다.
//
//## 실습2 : @Override 애노테이션의 역할을 이해하기 I
//- toString() 메서드 이름을 toString2()로 변경한 다음에 컴파일 해 보라.
//- 오버라이딩 규칙을 어겼음을 알리는 컴파일 오류가 발생한다.
//
//## 실습3 : @Override 애노테이션의 역할을 이해하기 II
//- @Override 애노테이션을 주석으로 막은 다음에 다시 컴파일 해 보라.
//- 오버라이딩 규칙을 검사하는 일을 컴파일러에게 요구하지 않는다. 
//- 컴파일러는 오버라이딩을 정상적으로 했는지 검사하지 않기 때문에 컴파일 오류가 발생하지 않는다.
----------------------------
ex03

println은 무조건 10진수로 출력

8진수: 0으로 시작
16진수: 0x으로 시작 (소문자로해.. 웬만하면)
2진수: 0b으로 시작 (소문자로해 웬만하면)

------------------------------
<강의 들어봐~>
harvard cs50 2019 - Lecture 0
https://www.youtube.com/watch?v=jjqgP9dpD1k

--------------------------------

진법강의: 노트 필기 참고
메모리크기: 노트 필기 참고

-------------------------------

===================================================================================
20191206 금요일

우리는 어플리케이션 Application S/W을 짠다

Application S/W는 명령어로 이루어져 있다.

이 명령어를 관리하기 쉽게 기능단위로 명령어를 묶는다 : function

f(~명령어~)
f(~명령어~)
f(~명령어~)
f(~명령어~)
f(~명령어~)

옛날에는 f들을 여러개의 파일로 나눠서 파일 단위로 묶었다. : C언어
(사진참고)

↓  class도입

Simula
smaltalk
Objective C
C++
Java
로 내려오면서 class도입 : function을 관리하기 쉽게 역할에 따라 묶는 문법.

↓

---------------------------
{f(~명령어~)  }	      |
{f(~명령어~)  } - class   |
{f(~명령어~)  }            | -> .java
                              |
{f(~명령어~)  }           |
{f(~명령어~)  } -class   |
---------------------------

-----------.java-----------------
{f(~명령어~)  }
{f(~명령어~)  } - class
{f(~명령어~)  }

{f(~명령어~)  }
{f(~명령어~)  } -class
--------------------------------

↓ package 도입 : "클래스"를 관리하기 쉽게 디렉토리로 묶는 문법 

(자바소스파일이 패키지에 속하는게 아니라 클래스가 패키지에 속하는것. 
공개클래스가 아닌경우 생각해봐)
한 소스파일에 패키지 명령어는 하나.
소스파일 위치가 중요한게 아니라 소스파일의 패키지 명령어가 중요. 그에 따라 클래스 파일 위치가 생성.
소스파일위치와 패키지명령어위치를 같게하자.. 

(사진참고)

--------------------------------------------------------------------------------
Data ----------> Application S/W --------------> Data, Information

Applicaion SW는 데이터를 다룬다.
데이터 관리 시스템 소프트웨어를 만든다.
()사진 참고()

데이터를 어떻게 표현할 것인가?, 데이터의 표현법 = 리터럴
변수 = 데이터를 저장할 메모리를 준비하는 방법.
연산자 = 데이터를 가공하는 도구
제어문 = 명령문의 실행 흐름을 제어 if else for while switch
변수 -> 배열 = 같은 유형의 메모리를 여러 개 준비시키는 문법
(클래스)메소드 = function 명령어들을 관리하기 편하게 기능 단위로 묶는 문법
클래스 = 메서드를 관리하기 편하게 역할role resposibility(책임) 단위로 분류시키는 문법
클래스 -> 사용자 정의 user(언어사용자=개발자) defined 데이터 타입
 = 메모리 구조를 데이터에 맞게 커스터마이징하는 문법
사용자 정의 데이터 타입 -> 생성자=인스턴스를 초기화 시키는 기능 
/ 인스턴스=클래스 설계도에 따라준비한 메모리
인스턴스->인스턴스메서드 = 인스턴스 메모리를 다루는 기능
클래스 -> (캡슐화)접근제어 = 메서드나 메모리의 접근을 제어
클래스 -> 상속 = 기존 명령에 새 기능을 추가하는 문법
클래스 -> Design Pattern = 효율적인 클리스 구조 관리

메서드, 인스턴트메서드, 상속 ->오버라이딩 = 기존 기능 재정의하는 문법 
/ 오버로딩 = 같은 이름의 유사 기능 추가 문법
/ 다형적변수 = 같은 유형의 메모리를 가리키는 방법 -> 3개를 묶어서 = 다형성

전체를 묶어서 Object Oriented Programming OOP문법

Data 저장 -> File I/O : 개발자가 직접 데이터를 저장하는 도구 사용법
             -> JDBC : DBMS를 사용해서 데이터를 저장시키는 도구 사용법 -> Mybatis Framework : JDBC도구를 좀 더 쉽게 사용하게 해주는 도구 사용법

Data 송수신 -> 네트워킹

Data web을 경유 -> 표현 -> HTML -> CSS : HTML 모양 제어 -> 자바스크립트와 css 도우미도구 = BootStrap, jQuery
                     -> 최종 사용자의 행동제어 -> Java Script   ->
		-> 서버 -> Spring, WebMVC

구조화 알고리즘 -> LinkedList, Stack, Queue?

------------------------------------------------
package com.ohoracs.basic.ex03; Exam1
//주석에 필기
C:\Users\user\git\bitcamp-study\bitcamp-java> javac -encoding UTF-8 -d bin/main src/main/java/com/ohoracs/basic/ex03/Exam1.java
C:\Users\user\git\bitcamp-study\bitcamp-java> java -cp bin/main com.ohoracs.basic.ex03.Exam1

----------------------------------------------------
(필기)
RAM: 바이트의 열로 이루어져 있음
byte = cell
bit
전기가 있고 없고를 문서상에서는 0과1로 표현

빛이든 소리든 2진수로 바꿀수만 있다면 무조건 컴터에 저장할 수 있다.
냄새는 안된다.
음파를 1과0 2진수로 저장해서 디지털신호를 아날로그로 바꿔서 듣는것.

정수 문자 논리값 부동소수점 그림 소리가 되었든 가에 저장하는 것은 전기적 신호로 저장 (신호가 있다 없다)
이것들을 2진수로만 바꿀수 있음 된다.

정수: 10진수 -> 2진수
문자: ASCII 등의 규칙으로 2진수로 바꿈
논리: true1 false0
부동소수점: IEEE754
그림: RGB로 바꿔 2진수로 바꿈
소리 : 파장을 2진수로 바꾸는 식이 있다.

결론)
어떤 값이든 2진수로 바꿀 수 있다면 컴퓨터에 전기적 신호로 저장가능하다.
2진수로 바꿀수 없는건 컴퓨터에 저장할 수 없다. 

----------------------------------------------

메모리는 전기적신호를 통해 인식
문서에 전기적신호를 표기하는 방법= 2진수

       (문서)       (실제)
값 -> 2진수 -> 전기적신호 -> 메모리

즉 어떤 값이든 2진수로 표현할 수 있으면 무조건 메모리에 저장 가능

정수: 10 -> 00001010                                                      -> ....#.#.
문자 'A' ---character set-----------------------------------> 01000001  -> .#.....#
              ex. ASCII(7bit)+서유럽어 = ISO-8859-1
              문자를 8비트로 바꾸는 규칙
              자바는 문자를 2바이트로 표현한다. [UCS-2] 2byte=16bit
논리 true ------------------------------------------------------->0000001  -> ......#
pixel 노랑 -- R11111111G111111111B00000000 -------------->3byte

값을 전기적신호로 바꾼다.
값을 2진수로 바꿀수만 있음 전기적 신호로 바꿀 수 있다.
값을 2진수로 바꾼다 = 인코딩 encoding
2진수를 값으로 바꾼다 = 디코딩 decoding

값을 규칙에 따라 값'로 바꾸는 것 = 인코딩 encoding
값'을 원래 값으로 복원 시키는 것 = 디코딩

영상데이터를 특정 규칙에 따라 압축해서 압축데이터로 만듬 = 인코딩
압축데이터를 다시 영상데이터로 만듬 = 디코딩 / 코덱 (엠펙 디코더=엠펙을 원래 영상으로 바꾸는거)

손실압축은 원래 이미지로 되돌릴 수 없다. jpg
비손실 압축은 원래 bmp로 돌릴 수 있다.

MPEG 손실압축이라 원래 영상으로 되돌릴 수 없다.
압축률이 높일 수록 영상 질이 떨어짐. 압축률이 낮을 수록 영상이 선명함.


정수 -----------> 2진수
       2의보수

부동소수점 -> 가수부(magnitude 방식) 음수 양수 같은값(절대값) 부호는 첫비트로 표현   ->2진수
              -> 지수부(k-excess 방식) 127초과

문자 -------------------------------->2진수
        UCS-2 Character set 규칙

논리 true1 false0


{절대값
{1의보수
{2의보수 : 뺴기 계산 대신 더하기 계산을 하려고. 402 = 4+ (-2) = 2 2의보수 방법
{k초과

-----------
메모리 저장방식 (필기)

하드디스크는 자성이기 때문에 전기 공급을 끊어도 데이터가 남아 있다.

ram 칩에 데이터를 저장해서  전기공급을 끊는 순간 데이터 날아감 (컴터 끄기 전에 파일저장하는 것)

하드가 아니라 칩에 저장하기: ssd 내부적으로 밧데리를 가지고 있는 칩. 전기가 끊어져도 데이터 유지 된다.

============================================================================================

1주차 체크리스트 정리 주말에 어떤 관리 프로젝트 할지 결정해와.
