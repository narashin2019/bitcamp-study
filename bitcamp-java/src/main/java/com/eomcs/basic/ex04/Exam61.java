package com.eomcs.basic.ex04;

//# 배열 - 같은 종류의 메모리를 쉽게 만드는 방법

public class Exam61 {
  public static void main(String[] args) {
    // 배열 사용 전
    int kor, eng, math, soc, mus;

    // 배열 사용 후
    // 문법
    //  메모리종류[] 메모리이름 = new 메모리종류[개수]
    //  데이터타입[] 변수명 = new 데이터타입[개수];
    int[] score = new int[5]; // OK!
    int score2[] = new int[5]; // OK! C-style. 하지마

    //배열에 값을 저장하는 방법
    score[0] = 100;
    score[1] = 90;
    score[2] = 80;
    score[3] = 70;
    score[4] = 60;

    // - 배열의 인덱스는 0부터 시작한다.
    // - 인덱스의 범위는 0 ~ (배열개수 - 1) 이다.
    //*컴파일할 때 발생하는 에러: 그나마 다행 / 실행시 발생하는 에러: 런타임 에러 
    //score[-1] = 100; // 컴파일시에러x 실행시에러뜸. runtime error!
    //score[5] = 100; // runtime error!





    // 배열 레퍼런스(배열의주소담고있는변수)와 인스턴스(값을 저장하는 메모리)를 따로 선언
    int[] arr1 = null; //null=> 주소가0, 의미는 메모리를 가리키지 않음. null안쓰면 error: variable arr1 might not have been initialized

    //arr1[0] = 100; // runtime error! 주소가 없다는 에러, java.lang.NullPointerException


    //배열 인스턴트 생성
    arr1 = new int[5];
    // arr1
    //   - 배열 메모리의 주소를 담는 변수이다.
    //   - 이렇게 메모리의 주소를 보관하는 변수를 '레퍼런스'라 부른다.
    //
    // new int[5]
    //   - new 명령은 사용할 메모리를 확보하는 명령이다.
    //   - 즉 연속된 5 개의 int 타입 메모리를 준비하라는 명령이다.
    //   - 사용할 메모리를 확보한 후 그 메모리의 찾아 갈 수 있도록 시작 주소를 리턴한다.
    //   - 이렇게 값을 저장하기 위해 확보된 메모리를 "인스턴스"라 부른다.
    //
    // new 명령은 메모리를 확보하는 명령이다.
    // - 리턴 값은 확보된 메모리의 시작 주소이다.
    arr1[0] = 100; // OK! 0=index // arr1에 저장된 주소로 찾아가서 0번째 항목에 값을 넣어라!
    arr1[1] = 100; // OK!
    // 레퍼런스(reference)란?
    // - 값이 아닌 메모리의 주소를 담는 변수.
    //
    // 인스턴스(instance)란?
    // - 값을 저장하는 메모리.


    // 배열 사용
    System.out.println(arr1[0]); //100출력
    System.out.println(arr1[1]); //100출력




    int[] arr2;

    // 배열 레퍼런스는 배열 인스턴스의 주소를 담는다.
    // 언제든 배열 인스턴스의 주소를 다른 레퍼런스에 담을 수 있다.
    arr2 = arr1; 
    // arr2와 arr1은 같은 배열 인스턴스를 가리킨다.
    // arr1에 저장된 배열 인스턴스의 주소를 담는다.
    System.out.println(arr1[0]); //100출력
    arr2[0] = 300;
    System.out.println(arr1[0]); //300출력

    // 배열 인스턴스의 각 항목은 생성되는 순간 기본 값으로 자동 초기화 된다.
    // 일반 변수는 값을 저장하지 않고 사용할 수 없다.
    // 일반 변수와 달리 new 명령으로 확보된 메모리는 종류에 상관없이 기본 값으로 자동 초기화 된다.
    // 따라서 배열 메모리 또한 생성되는 순간 기본 값으로 자동 초기화 된다.
    // 정수 배열(byte[], short[], int[], long[]) : 0
    // 부동소수점 배열(float[], double[]) : 0.0
    // 논리 배열(boolean[]) : false 
    // 문자 배열(char[]) : '\u0000'
    // 주소 변수(Object[]) : null
    //cf. 로컬변수에 값을 초기화시키지 않으면 에러뜸
    System.out.println(arr1[2]); // 0출력


    int[] arr3 = new int[3];
    arr3[0] = 30;

    arr2 = arr3;
    System.out.println(arr2[0]); // 30출력

    arr1 = arr2;
    System.out.println(arr1[0]); // 30출력

    // 그럼 arr1에 저장되었던 기존 배열 인스턴스에는 
    // 어떻게 접근하는가?
    // => 처음 생성했던 배열 인스턴스의 주소를 갖고 있는
    //    레퍼런스가 없기 때문에 접근할 수 없다.
    // => 이렇게 주소를 잃어버려 접근할 수 없는 메모리를
    //    "가비지(garbage)"라고 부른다.
    // => 가비지는 JVM 실행 중에 메모리가 부족할 때
    //    "가비지 수집기(garbage collector)"에 의해 
    //    메모리에서 해제된다.
    //    물론 JVM을 종료하면 당연히 JVM이 사용하던
    //    모든 메모리를 OS에 반납되기 때문에 
    //    가비지 또한 반납될 것이다.
    //    
    // => 전산학에서는 "가비지"를 "dangling object"라고 부른다.

    // 가비지 동작
    // 1) 메모리가 부족할 때
    // 2) CPU가 한가할 때




    // 배열 인스턴스 생성과 동시에 값 초기화 시키기
    int[] arr4 =new int[3];
    arr4[0] =100;
    arr4[1] = 90;
    arr4[3] = 80;

    // 초기화 시키는 값 개수 만큼 배열 항목이 생성된다.
    int[] arr5 = new int[] {100, 90, 80};

    // 인스턴스 생성과 동시에 값을 지정할떄는 
    // 배열 개수를 지정하면 안된다.
    //int[] arr6 = new int[3] {100, 90, 80}; // 컴파일오류

    // 배열 선언과 동시에 인스턴스를 초기화 시킬 때는
    // new int[]를 생략할 수 있다.
    int[] arr7 = {100, 90, 80}; // 많이씀

    // 그러나 배열 변수를 선언한 후 따로 초기화시킬 때는
    // new int[]를 생략할 수 없다.
    int[] arr8;
    //arr8 = {100, 90, 80}]; // 컴파일 오류
    arr8 = new int[] {100, 90, 80};



    // 프리머타입 배열얘기만 한 것.
    // 정리!
    // 1) 배열 선언 + 초기화
    //     데이터타입[] 변수명 = new 데이터타입[]{값, 값, 값};
    //     - 배열 메모리를 초기화시킬 때는 배열 개수를 지정해서는 안된다.
    //     - 배열을 초기화시키는 값의 개수 만큼 메모리가 만들어진다.
    //     - 즉 다음은 값 개수만큼 int 메모리가 3개가 생성된다.
    //       ex) int[] arr = new int[]{10, 20, 30};
    //     - 다음과 같이 new 명령을 생략할 수 있다.
    //       데이터타입[] 변수명 = {값, 값, 값};
    //       ex) int[] arr = {10, 20, 30};
    // 
    // 2) 배열 선언 후 따로 배열 초기화 문장 실행
    //     데이터타입[] 변수명;
    //     변수명 = new 데이터타입[]{값, 값, 값};
    //     ex) 
    //     int[] arr1;
    //     arr1 = new int[]{10, 20, 30}; 
    //     - 변수를 선언한 후 따로 배열을 초기화시킬 때는 
    //       new 명령을 생략할 수 없다.

  }
}

/*
 *
int a, b, c;

c=20;
b=30;
a=10;

4byte 4byte 4byte
[ a ]  [ b ]   [ c ]
[40]   [30]   [20]

같은 타입의 변수를 여러개 만들 때.
같은 데이터 타입의 메모리를 여러 개 생성(확보)할 때 사용

 *
int[] arr          = new int[3]; //int 유형의 4바이트 메모리를 연속된 메모리로 만든다
                       (data type)
배열 주소를 담는 변수 arr, 주소를 저장하는 변수 "reference"(씨: 포인터변수) int배열의 주소를 arr에 담겟다
우항에서 메모리의 주소를 리턴. 좌항에 담는다
우항: 실제 값을 저장하는 메모리 "instance"


 *8개: primative data type 8개 제외 나머지는 전부 레퍼런스!
그자체로 쓸 수 없고 주소가 담겨 있어야 쓸 수 있다.

char[] c;
Date date;
String str;
Object obt;

 *null point exception: 

Date date;
date.getYears();
=>주소가 없다!


 *JVM은 절대주소가 아닌 offset주소를 쓴다. 
(기준점으로 부터 상대적으로 얼마나 떨어져 있나)


<<<<<<< HEAD
//가비지(garbage)?
//- 주소를 잃어버려 사용할 수 없는 메모리(인스턴스)
//- JVM을 종료하면 어차피 OS에게 사용한 메모리를 반납해야 하기 때문에
//자동으로 해제된다.
//- 그러나 JVM이 실행하는 중에 개발자가 임의로 해제할 수 없다.
//- 오직 가비지 컬렉터(garbage collector)만이 가비지를 해제할 수 있다.
//
//가비지 컬렉터(garbage collector)?
//- 인스턴스의 주소를 알고 있는 변수가 없을 경우
//그 인스턴스는 가비지로 간주된다.
//- 가비지 메모리를 재사용할 수 있도록 해제시키는 방법
//=> 개발자가 임의로 해제 불가능한다.
//=> 가비지 컬렉터가 실행되어야만 해제시킬 수 있다.
//
//가비지 컬렉터의 실행
//- 다음의 경우에 가비지 컬렉터가 실행되어 가비지들이 해제된다.
//1) 메모리가 부족할 경우
// - OS에게 메모리를 요청하기 전에 먼저 가비지를 청소한 다음에 
//   요청할 지 말지 결정한다.
//2) CPU가 한가할 때 
// - 24시간, 365일 내내 멈춤없이 JVM이 실행될 경우,
//   CPU가 한가한 시간에 가비지를 청소할 수 있다.
// - 정확히 언제인지 시간을 지정하거나 예측할 수는 없다.
//3) 개발자가 가비지 컬렉터를 실행하라고 명령을 내릴 때
// - 명령을 내린다고 즉시 실행되는 것은 아니다.
// - 일종의 빠른 시일내에 가비지를 실행하라고 JVM에 예약하는 것이다.
//결론! 
//- 가비지는 가비지 컬렉터가 자기 나름의 조건에 따라 실행할 것이니,
//개발자는 신경쓰지 말라!
//- 만약 메모리를 개발자가 마음대로 조작하고 싶으면,
//C/C++로 프로그래밍하라!
//- 가비지 컬렉터라는 개념을 등장시킨 이유는,
//C/C++ 개발자들이 메모리를 자기 마음대로 조작하다가 
//시스템에 치명적인 문제들을 자주 일으켰기 때문에
//그것을 차단하기 위해서 나온 개념이다.
//- 그러니 가비지 컬렉터를 개발자가 임의로 동작시키는 것 자체가
//가비지 컬렉터의 존재가 이유를 무시하는 것이 된다.
//따라서 메모리를 임의로 해제할 생각을 말라!
//
//가비지 컬렉션(garbage collection)?
//- 가비지 컬렉터를 통해서 가비지를 해제시키는 것.
//
//가비지 컬렉션 방식의 문제점?
//- 가비지 컬렉터가 실행되기 전까지는 일정 시간 쓰레기 메모리가 
//유지된다.
//- 메모리 사용률을 극한으로 끌어 올릴 수 없다.
//- 근데 너무 메모리 사용에 대해 짜게 굴지말라!
//왜?
//요즘 메모리 값이 싸다!
//   
//
=======
 *
 int[] arr2 = new int[5]; 
arr1 = arr2;
//둘 다 같은 애를 가리킴
 */
>>>>>>> ee7fd5e8a0397cce6d0f52dd487d1d0ac9289b7f
